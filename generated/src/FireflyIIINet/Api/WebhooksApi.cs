/*
 * Firefly III API v2.0.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-05-17T04:54:43+00:00 
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a webhook.
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete a webhook.
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Delete a webhook message.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete a webhook message.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookMessageWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Delete a webhook attempt.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete a webhook attempt.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookMessageAttemptWithHttpInfo(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single message from a webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookMessageSingle</returns>
        WebhookMessageSingle GetSingleWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single message from a webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookMessageSingle</returns>
        ApiResponse<WebhookMessageSingle> GetSingleWebhookMessageWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single failed attempt from a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookAttemptSingle</returns>
        WebhookAttemptSingle GetSingleWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single failed attempt from a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookAttemptSingle</returns>
        ApiResponse<WebhookAttemptSingle> GetSingleWebhookMessageAttemptWithHttpInfo(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single webhook.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        WebhookSingle GetWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single webhook.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        ApiResponse<WebhookSingle> GetWebhookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get all the failed attempts of a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookAttemptArray</returns>
        WebhookAttemptArray GetWebhookMessageAttempts(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all the failed attempts of a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookAttemptArray</returns>
        ApiResponse<WebhookAttemptArray> GetWebhookMessageAttemptsWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all the messages of a single webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookMessageArray</returns>
        WebhookMessageArray GetWebhookMessages(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get all the messages of a single webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookMessageArray</returns>
        ApiResponse<WebhookMessageArray> GetWebhookMessagesWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// List all webhooks.
        /// </summary>
        /// <remarks>
        /// List all the user&#39;s webhooks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookArray</returns>
        WebhookArray ListWebhook(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all webhooks.
        /// </summary>
        /// <remarks>
        /// List all the user&#39;s webhooks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookArray</returns>
        ApiResponse<WebhookArray> ListWebhookWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Store a new webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        WebhookSingle StoreWebhook(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Store a new webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        ApiResponse<WebhookSingle> StoreWebhookWithHttpInfo(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Submit messages for a webhook.
        /// </summary>
        /// <remarks>
        /// This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SubmitWebook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Submit messages for a webhook.
        /// </summary>
        /// <remarks>
        /// This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitWebookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update existing webhook.
        /// </summary>
        /// <remarks>
        /// Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        WebhookSingle UpdateWebhook(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Update existing webhook.
        /// </summary>
        /// <remarks>
        /// Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        ApiResponse<WebhookSingle> UpdateWebhookWithHttpInfo(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a webhook.
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteWebhookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a webhook.
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a webhook message.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteWebhookMessageAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a webhook message.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWebhookMessageWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a webhook attempt.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteWebhookMessageAttemptAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a webhook attempt.
        /// </summary>
        /// <remarks>
        /// Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteWebhookMessageAttemptWithHttpInfoAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single message from a webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookMessageSingle</returns>
        Task<WebhookMessageSingle> GetSingleWebhookMessageAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single message from a webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookMessageSingle)</returns>
        Task<ApiResponse<WebhookMessageSingle>> GetSingleWebhookMessageWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single failed attempt from a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookAttemptSingle</returns>
        Task<WebhookAttemptSingle> GetSingleWebhookMessageAttemptAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single failed attempt from a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookAttemptSingle)</returns>
        Task<ApiResponse<WebhookAttemptSingle>> GetSingleWebhookMessageAttemptWithHttpInfoAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single webhook.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        Task<WebhookSingle> GetWebhookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single webhook.
        /// </summary>
        /// <remarks>
        /// Gets all info of a single webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        Task<ApiResponse<WebhookSingle>> GetWebhookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all the failed attempts of a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookAttemptArray</returns>
        Task<WebhookAttemptArray> GetWebhookMessageAttemptsAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all the failed attempts of a single webhook message.
        /// </summary>
        /// <remarks>
        /// When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookAttemptArray)</returns>
        Task<ApiResponse<WebhookAttemptArray>> GetWebhookMessageAttemptsWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all the messages of a single webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookMessageArray</returns>
        Task<WebhookMessageArray> GetWebhookMessagesAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all the messages of a single webhook.
        /// </summary>
        /// <remarks>
        /// When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookMessageArray)</returns>
        Task<ApiResponse<WebhookMessageArray>> GetWebhookMessagesWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all webhooks.
        /// </summary>
        /// <remarks>
        /// List all the user&#39;s webhooks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookArray</returns>
        Task<WebhookArray> ListWebhookAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all webhooks.
        /// </summary>
        /// <remarks>
        /// List all the user&#39;s webhooks.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookArray)</returns>
        Task<ApiResponse<WebhookArray>> ListWebhookWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Store a new webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        Task<WebhookSingle> StoreWebhookAsync(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a new webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        Task<ApiResponse<WebhookSingle>> StoreWebhookWithHttpInfoAsync(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Submit messages for a webhook.
        /// </summary>
        /// <remarks>
        /// This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task SubmitWebookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit messages for a webhook.
        /// </summary>
        /// <remarks>
        /// This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> SubmitWebookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update existing webhook.
        /// </summary>
        /// <remarks>
        /// Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        Task<WebhookSingle> UpdateWebhookAsync(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update existing webhook.
        /// </summary>
        /// <remarks>
        /// Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        Task<ApiResponse<WebhookSingle>> UpdateWebhookWithHttpInfoAsync(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteWebhook.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhook");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.DeleteWebhook" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete a webhook. Delete a webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteWebhookWithHttpInfo(id, xTraceId);
        }

        /// <summary>
        /// Delete a webhook. Delete a webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/webhooks/{id}", localVarRequestOptions, Configuration);
            ValidateException("DeleteWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook. Delete a webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteWebhookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteWebhookWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a webhook. Delete a webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/webhooks/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteWebhookMessage.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhookMessage");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.DeleteWebhookMessage" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", ClientUtils.ParameterToString(messageId)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete a webhook message. Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteWebhookMessageWithHttpInfo(id, messageId, xTraceId);
        }

        /// <summary>
        /// Delete a webhook message. Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookMessageWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhookMessage(id, messageId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/webhooks/{id}/messages/{messageId}", localVarRequestOptions, Configuration);
            ValidateException("DeleteWebhookMessage", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook message. Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteWebhookMessageAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteWebhookMessageWithHttpInfoAsync(id, messageId, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a webhook message. Delete a webhook message. Any time a webhook is triggered the message is stored before it&#39;s sent. You can delete them before or after sending.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteWebhookMessageWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhookMessage(id, messageId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/webhooks/{id}/messages/{messageId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteWebhookMessage", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteWebhookMessageAttempt.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->DeleteWebhookMessageAttempt");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.DeleteWebhookMessageAttempt" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attemptId", ClientUtils.ParameterToString(attemptId)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete a webhook attempt. Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteWebhookMessageAttemptWithHttpInfo(id, messageId, attemptId, xTraceId);
        }

        /// <summary>
        /// Delete a webhook attempt. Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookMessageAttemptWithHttpInfo(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhookMessageAttempt(id, messageId, attemptId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/webhooks/{id}/messages/{messageId}/attempts/{attemptId}", localVarRequestOptions, Configuration);
            ValidateException("DeleteWebhookMessageAttempt", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook attempt. Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteWebhookMessageAttemptAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteWebhookMessageAttemptWithHttpInfoAsync(id, messageId, attemptId, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a webhook attempt. Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook message attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteWebhookMessageAttemptWithHttpInfoAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteWebhookMessageAttempt(id, messageId, attemptId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/webhooks/{id}/messages/{messageId}/attempts/{attemptId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteWebhookMessageAttempt", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetSingleWebhookMessage.
        /// </summary>
		private RequestOptions GetRequestOptionsGetSingleWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetSingleWebhookMessage");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.GetSingleWebhookMessage" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", ClientUtils.ParameterToString(messageId)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single message from a webhook. When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookMessageSingle</returns>
        public WebhookMessageSingle GetSingleWebhookMessage(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookMessageSingle> localVarResponse = GetSingleWebhookMessageWithHttpInfo(id, messageId, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single message from a webhook. When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookMessageSingle</returns>
        public ApiResponse<WebhookMessageSingle> GetSingleWebhookMessageWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleWebhookMessage(id, messageId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookMessageSingle>("/v1/webhooks/{id}/messages/{messageId}", localVarRequestOptions, Configuration);
            ValidateException("GetSingleWebhookMessage", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single message from a webhook. When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookMessageSingle</returns>
        public async Task<WebhookMessageSingle> GetSingleWebhookMessageAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookMessageSingle> localVarResponse = await GetSingleWebhookMessageWithHttpInfoAsync(id, messageId, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single message from a webhook. When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookMessageSingle)</returns>
        public async Task<ApiResponse<WebhookMessageSingle>> GetSingleWebhookMessageWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleWebhookMessage(id, messageId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookMessageSingle>("/v1/webhooks/{id}/messages/{messageId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetSingleWebhookMessage", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetSingleWebhookMessageAttempt.
        /// </summary>
		private RequestOptions GetRequestOptionsGetSingleWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetSingleWebhookMessageAttempt");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.GetSingleWebhookMessageAttempt" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attemptId", ClientUtils.ParameterToString(attemptId)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single failed attempt from a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookAttemptSingle</returns>
        public WebhookAttemptSingle GetSingleWebhookMessageAttempt(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookAttemptSingle> localVarResponse = GetSingleWebhookMessageAttemptWithHttpInfo(id, messageId, attemptId, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single failed attempt from a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookAttemptSingle</returns>
        public ApiResponse<WebhookAttemptSingle> GetSingleWebhookMessageAttemptWithHttpInfo(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleWebhookMessageAttempt(id, messageId, attemptId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookAttemptSingle>("/v1/webhooks/{id}/messages/{messageId}/attempts/{attemptId}", localVarRequestOptions, Configuration);
            ValidateException("GetSingleWebhookMessageAttempt", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single failed attempt from a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookAttemptSingle</returns>
        public async Task<WebhookAttemptSingle> GetSingleWebhookMessageAttemptAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookAttemptSingle> localVarResponse = await GetSingleWebhookMessageAttemptWithHttpInfoAsync(id, messageId, attemptId, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single failed attempt from a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="attemptId">The webhook attempt ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookAttemptSingle)</returns>
        public async Task<ApiResponse<WebhookAttemptSingle>> GetSingleWebhookMessageAttemptWithHttpInfoAsync(string id, int messageId, int attemptId, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleWebhookMessageAttempt(id, messageId, attemptId, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookAttemptSingle>("/v1/webhooks/{id}/messages/{messageId}/attempts/{attemptId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetSingleWebhookMessageAttempt", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetWebhook.
        /// </summary>
		private RequestOptions GetRequestOptionsGetWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhook");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.GetWebhook" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single webhook. Gets all info of a single webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        public WebhookSingle GetWebhook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookSingle> localVarResponse = GetWebhookWithHttpInfo(id, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single webhook. Gets all info of a single webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        public ApiResponse<WebhookSingle> GetWebhookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookSingle>("/v1/webhooks/{id}", localVarRequestOptions, Configuration);
            ValidateException("GetWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single webhook. Gets all info of a single webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        public async Task<WebhookSingle> GetWebhookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookSingle> localVarResponse = await GetWebhookWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single webhook. Gets all info of a single webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        public async Task<ApiResponse<WebhookSingle>> GetWebhookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookSingle>("/v1/webhooks/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetWebhookMessageAttempts.
        /// </summary>
		private RequestOptions GetRequestOptionsGetWebhookMessageAttempts(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhookMessageAttempts");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.GetWebhookMessageAttempts" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", ClientUtils.ParameterToString(messageId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get all the failed attempts of a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookAttemptArray</returns>
        public WebhookAttemptArray GetWebhookMessageAttempts(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<WebhookAttemptArray> localVarResponse = GetWebhookMessageAttemptsWithHttpInfo(id, messageId, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the failed attempts of a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookAttemptArray</returns>
        public ApiResponse<WebhookAttemptArray> GetWebhookMessageAttemptsWithHttpInfo(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhookMessageAttempts(id, messageId, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookAttemptArray>("/v1/webhooks/{id}/messages/{messageId}/attempts", localVarRequestOptions, Configuration);
            ValidateException("GetWebhookMessageAttempts", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get all the failed attempts of a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookAttemptArray</returns>
        public async Task<WebhookAttemptArray> GetWebhookMessageAttemptsAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookAttemptArray> localVarResponse = await GetWebhookMessageAttemptsWithHttpInfoAsync(id, messageId, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the failed attempts of a single webhook message. When a webhook message fails to send it will store the failure in an \&quot;attempt\&quot;. You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="messageId">The webhook message ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50 items. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookAttemptArray)</returns>
        public async Task<ApiResponse<WebhookAttemptArray>> GetWebhookMessageAttemptsWithHttpInfoAsync(string id, int messageId, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhookMessageAttempts(id, messageId, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookAttemptArray>("/v1/webhooks/{id}/messages/{messageId}/attempts", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetWebhookMessageAttempts", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetWebhookMessages.
        /// </summary>
		private RequestOptions GetRequestOptionsGetWebhookMessages(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->GetWebhookMessages");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.GetWebhookMessages" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get all the messages of a single webhook. When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookMessageArray</returns>
        public WebhookMessageArray GetWebhookMessages(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookMessageArray> localVarResponse = GetWebhookMessagesWithHttpInfo(id, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the messages of a single webhook. When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookMessageArray</returns>
        public ApiResponse<WebhookMessageArray> GetWebhookMessagesWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhookMessages(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookMessageArray>("/v1/webhooks/{id}/messages", localVarRequestOptions, Configuration);
            ValidateException("GetWebhookMessages", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get all the messages of a single webhook. When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookMessageArray</returns>
        public async Task<WebhookMessageArray> GetWebhookMessagesAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookMessageArray> localVarResponse = await GetWebhookMessagesWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the messages of a single webhook. When a webhook is triggered the actual message that will be send is stored in a \&quot;message\&quot;. You can view and analyse these messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookMessageArray)</returns>
        public async Task<ApiResponse<WebhookMessageArray>> GetWebhookMessagesWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetWebhookMessages(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookMessageArray>("/v1/webhooks/{id}/messages", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetWebhookMessages", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListWebhook.
        /// </summary>
		private RequestOptions GetRequestOptionsListWebhook(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.ListWebhook" ,operationIndex);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all webhooks. List all the user&#39;s webhooks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookArray</returns>
        public WebhookArray ListWebhook(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<WebhookArray> localVarResponse = ListWebhookWithHttpInfo(xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks. List all the user&#39;s webhooks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookArray</returns>
        public ApiResponse<WebhookArray> ListWebhookWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListWebhook(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<WebhookArray>("/v1/webhooks", localVarRequestOptions, Configuration);
            ValidateException("ListWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all webhooks. List all the user&#39;s webhooks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookArray</returns>
        public async Task<WebhookArray> ListWebhookAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookArray> localVarResponse = await ListWebhookWithHttpInfoAsync(xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks. List all the user&#39;s webhooks.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">The page number, if necessary. The default pagination is 50, so 50 webhooks per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookArray)</returns>
        public async Task<ApiResponse<WebhookArray>> ListWebhookWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListWebhook(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<WebhookArray>("/v1/webhooks", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for StoreWebhook.
        /// </summary>
		private RequestOptions GetRequestOptionsStoreWebhook(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'webhookStore' is set
            if (webhookStore == null)
            {
                throw new ApiException(400, "Missing required parameter 'webhookStore' when calling WebhooksApi->StoreWebhook");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.StoreWebhook" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = webhookStore;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Store a new webhook Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        public WebhookSingle StoreWebhook(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookSingle> localVarResponse = StoreWebhookWithHttpInfo(webhookStore, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new webhook Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        public ApiResponse<WebhookSingle> StoreWebhookWithHttpInfo(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreWebhook(webhookStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<WebhookSingle>("/v1/webhooks", localVarRequestOptions, Configuration);
            ValidateException("StoreWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Store a new webhook Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        public async Task<WebhookSingle> StoreWebhookAsync(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookSingle> localVarResponse = await StoreWebhookWithHttpInfoAsync(webhookStore, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new webhook Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookStore">JSON array or key&#x3D;value pairs with the necessary webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        public async Task<ApiResponse<WebhookSingle>> StoreWebhookWithHttpInfoAsync(WebhookStore webhookStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreWebhook(webhookStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<WebhookSingle>("/v1/webhooks", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("StoreWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for SubmitWebook.
        /// </summary>
		private RequestOptions GetRequestOptionsSubmitWebook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->SubmitWebook");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.SubmitWebook" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Submit messages for a webhook. This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SubmitWebook(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            SubmitWebookWithHttpInfo(id, xTraceId);
        }

        /// <summary>
        /// Submit messages for a webhook. This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubmitWebookWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsSubmitWebook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<Object>("/v1/webhooks/{id}/submit", localVarRequestOptions, Configuration);
            ValidateException("SubmitWebook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Submit messages for a webhook. This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task SubmitWebookAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await SubmitWebookWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Submit messages for a webhook. This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can&#39;t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> SubmitWebookWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsSubmitWebook(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<Object>("/v1/webhooks/{id}/submit", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("SubmitWebook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for UpdateWebhook.
        /// </summary>
		private RequestOptions GetRequestOptionsUpdateWebhook(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling WebhooksApi->UpdateWebhook");
            }

            // verify the required parameter 'webhookUpdate' is set
            if (webhookUpdate == null)
            {
                throw new ApiException(400, "Missing required parameter 'webhookUpdate' when calling WebhooksApi->UpdateWebhook");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"WebhooksApi.UpdateWebhook" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = webhookUpdate;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Update existing webhook. Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSingle</returns>
        public WebhookSingle UpdateWebhook(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<WebhookSingle> localVarResponse = UpdateWebhookWithHttpInfo(id, webhookUpdate, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing webhook. Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSingle</returns>
        public ApiResponse<WebhookSingle> UpdateWebhookWithHttpInfo(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateWebhook(id, webhookUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Put<WebhookSingle>("/v1/webhooks/{id}", localVarRequestOptions, Configuration);
            ValidateException("UpdateWebhook", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Update existing webhook. Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSingle</returns>
        public async Task<WebhookSingle> UpdateWebhookAsync(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<WebhookSingle> localVarResponse = await UpdateWebhookWithHttpInfoAsync(id, webhookUpdate, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing webhook. Update an existing webhook&#39;s information. If you wish to reset the secret, submit any value as the \&quot;secret\&quot;. Firefly III will take this as a hint and reset the secret of the webhook.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The webhook ID.</param>
        /// <param name="webhookUpdate">JSON array with updated webhook information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSingle)</returns>
        public async Task<ApiResponse<WebhookSingle>> UpdateWebhookWithHttpInfoAsync(string id, WebhookUpdate webhookUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateWebhook(id, webhookUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<WebhookSingle>("/v1/webhooks/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("UpdateWebhook", localVarResponse);
            return localVarResponse;
        }
    }
}
