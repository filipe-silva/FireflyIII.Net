/*
 * Firefly III API v2.0.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-05-17T04:54:43+00:00 
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle DefaultCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> DefaultCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle DisableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> DisableCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle EnableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> EnableCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle GetCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> GetCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get the user&#39;s default currency.
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s default currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle GetDefaultCurrency(Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get the user&#39;s default currency.
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s default currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> GetDefaultCurrencyWithHttpInfo(Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountArray</returns>
        AccountArray ListAccountByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0);

        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountArray</returns>
        ApiResponse<AccountArray> ListAccountByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0);
        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        AvailableBudgetArray ListAvailableBudgetByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        ApiResponse<AvailableBudgetArray> ListAvailableBudgetByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BillArray</returns>
        BillArray ListBillByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BillArray</returns>
        ApiResponse<BillArray> ListBillByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetLimitArray</returns>
        BudgetLimitArray ListBudgetLimitByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        ApiResponse<BudgetLimitArray> ListBudgetLimitByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyArray</returns>
        CurrencyArray ListCurrency(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyArray</returns>
        ApiResponse<CurrencyArray> ListCurrencyWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        RecurrenceArray ListRecurrenceByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        ApiResponse<RecurrenceArray> ListRecurrenceByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleArray</returns>
        RuleArray ListRuleByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleArray</returns>
        ApiResponse<RuleArray> ListRuleByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);

        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);
        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle StoreCurrency(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> StoreCurrencyWithHttpInfo(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle UpdateCurrency(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> UpdateCurrencyWithHttpInfo(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> DefaultCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> DefaultCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> DisableCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> DisableCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> EnableCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> EnableCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> GetCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> GetCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the user&#39;s default currency.
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s default currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> GetDefaultCurrencyAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the user&#39;s default currency.
        /// </summary>
        /// <remarks>
        /// Get the user&#39;s default currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> GetDefaultCurrencyWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountArray</returns>
        Task<AccountArray> ListAccountByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountArray)</returns>
        Task<ApiResponse<AccountArray>> ListAccountByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        Task<AvailableBudgetArray> ListAvailableBudgetByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        Task<ApiResponse<AvailableBudgetArray>> ListAvailableBudgetByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BillArray</returns>
        Task<BillArray> ListBillByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BillArray)</returns>
        Task<ApiResponse<BillArray>> ListBillByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetLimitArray</returns>
        Task<BudgetLimitArray> ListBudgetLimitByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        Task<ApiResponse<BudgetLimitArray>> ListBudgetLimitByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyArray</returns>
        Task<CurrencyArray> ListCurrencyAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyArray)</returns>
        Task<ApiResponse<CurrencyArray>> ListCurrencyWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        Task<RecurrenceArray> ListRecurrenceByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        Task<ApiResponse<RecurrenceArray>> ListRecurrenceByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleArray</returns>
        Task<RuleArray> ListRuleByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        Task<ApiResponse<RuleArray>> ListRuleByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        Task<TransactionArray> ListTransactionByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        Task<ApiResponse<TransactionArray>> ListTransactionByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> StoreCurrencyAsync(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> StoreCurrencyWithHttpInfoAsync(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        Task<CurrencySingle> UpdateCurrencyAsync(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        Task<ApiResponse<CurrencySingle>> UpdateCurrencyWithHttpInfoAsync(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApi : ICurrenciesApiSync, ICurrenciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrenciesApi : ICurrenciesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CurrenciesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for DefaultCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsDefaultCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DefaultCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.DefaultCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Make currency default currency. Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle DefaultCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = DefaultCurrencyWithHttpInfo(code, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> DefaultCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDefaultCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<CurrencySingle>("/v1/currencies/{code}/default", localVarRequestOptions, Configuration);
            ValidateException("DefaultCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> DefaultCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await DefaultCurrencyWithHttpInfoAsync(code, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> DefaultCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDefaultCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<CurrencySingle>("/v1/currencies/{code}/default", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DefaultCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DeleteCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.DeleteCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteCurrencyWithHttpInfo(code, xTraceId);
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/currencies/{code}", localVarRequestOptions, Configuration);
            ValidateException("DeleteCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteCurrencyWithHttpInfoAsync(code, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/currencies/{code}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for DisableCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsDisableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DisableCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.DisableCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle DisableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = DisableCurrencyWithHttpInfo(code, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> DisableCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDisableCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<CurrencySingle>("/v1/currencies/{code}/disable", localVarRequestOptions, Configuration);
            ValidateException("DisableCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> DisableCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await DisableCurrencyWithHttpInfoAsync(code, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> DisableCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDisableCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<CurrencySingle>("/v1/currencies/{code}/disable", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DisableCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for EnableCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsEnableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->EnableCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.EnableCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle EnableCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = EnableCurrencyWithHttpInfo(code, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> EnableCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsEnableCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<CurrencySingle>("/v1/currencies/{code}/enable", localVarRequestOptions, Configuration);
            ValidateException("EnableCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> EnableCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await EnableCurrencyWithHttpInfoAsync(code, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> EnableCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsEnableCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<CurrencySingle>("/v1/currencies/{code}/enable", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("EnableCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsGetCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->GetCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.GetCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle GetCurrency(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = GetCurrencyWithHttpInfo(code, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> GetCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<CurrencySingle>("/v1/currencies/{code}", localVarRequestOptions, Configuration);
            ValidateException("GetCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> GetCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await GetCurrencyWithHttpInfoAsync(code, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> GetCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrency(code, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<CurrencySingle>("/v1/currencies/{code}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetDefaultCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsGetDefaultCurrency(Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.GetDefaultCurrency" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get the user&#39;s default currency. Get the user&#39;s default currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle GetDefaultCurrency(Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = GetDefaultCurrencyWithHttpInfo(xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s default currency. Get the user&#39;s default currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> GetDefaultCurrencyWithHttpInfo(Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetDefaultCurrency(xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<CurrencySingle>("/v1/currencies/default", localVarRequestOptions, Configuration);
            ValidateException("GetDefaultCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get the user&#39;s default currency. Get the user&#39;s default currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> GetDefaultCurrencyAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await GetDefaultCurrencyWithHttpInfoAsync(xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s default currency. Get the user&#39;s default currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> GetDefaultCurrencyWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetDefaultCurrency(xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<CurrencySingle>("/v1/currencies/default", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetDefaultCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListAccountByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListAccountByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAccountByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListAccountByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountArray</returns>
        public AccountArray ListAccountByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
        {
            ApiResponse<AccountArray> localVarResponse = ListAccountByCurrencyWithHttpInfo(code, xTraceId, page, date, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountArray</returns>
        public ApiResponse<AccountArray> ListAccountByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAccountByCurrency(code, xTraceId, page, date, type, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<AccountArray>("/v1/currencies/{code}/accounts", localVarRequestOptions, Configuration);
            ValidateException("ListAccountByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountArray</returns>
        public async Task<AccountArray> ListAccountByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<AccountArray> localVarResponse = await ListAccountByCurrencyWithHttpInfoAsync(code, xTraceId, page, date, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountArray)</returns>
        public async Task<ApiResponse<AccountArray>> ListAccountByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? date = default(DateTime?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAccountByCurrency(code, xTraceId, page, date, type, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<AccountArray>("/v1/currencies/{code}/accounts", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListAccountByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListAvailableBudgetByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListAvailableBudgetByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAvailableBudgetByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListAvailableBudgetByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        public AvailableBudgetArray ListAvailableBudgetByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<AvailableBudgetArray> localVarResponse = ListAvailableBudgetByCurrencyWithHttpInfo(code, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        public ApiResponse<AvailableBudgetArray> ListAvailableBudgetByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAvailableBudgetByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<AvailableBudgetArray>("/v1/currencies/{code}/available-budgets", localVarRequestOptions, Configuration);
            ValidateException("ListAvailableBudgetByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        public async Task<AvailableBudgetArray> ListAvailableBudgetByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<AvailableBudgetArray> localVarResponse = await ListAvailableBudgetByCurrencyWithHttpInfoAsync(code, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        public async Task<ApiResponse<AvailableBudgetArray>> ListAvailableBudgetByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAvailableBudgetByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<AvailableBudgetArray>("/v1/currencies/{code}/available-budgets", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListAvailableBudgetByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListBillByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListBillByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBillByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListBillByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BillArray</returns>
        public BillArray ListBillByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<BillArray> localVarResponse = ListBillByCurrencyWithHttpInfo(code, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BillArray</returns>
        public ApiResponse<BillArray> ListBillByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListBillByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<BillArray>("/v1/currencies/{code}/bills", localVarRequestOptions, Configuration);
            ValidateException("ListBillByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BillArray</returns>
        public async Task<BillArray> ListBillByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<BillArray> localVarResponse = await ListBillByCurrencyWithHttpInfoAsync(code, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BillArray)</returns>
        public async Task<ApiResponse<BillArray>> ListBillByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListBillByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<BillArray>("/v1/currencies/{code}/bills", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListBillByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListBudgetLimitByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListBudgetLimitByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBudgetLimitByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListBudgetLimitByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetLimitArray</returns>
        public BudgetLimitArray ListBudgetLimitByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            ApiResponse<BudgetLimitArray> localVarResponse = ListBudgetLimitByCurrencyWithHttpInfo(code, xTraceId, page, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        public ApiResponse<BudgetLimitArray> ListBudgetLimitByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListBudgetLimitByCurrency(code, xTraceId, page, start, end, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<BudgetLimitArray>("/v1/currencies/{code}/budget_limits", localVarRequestOptions, Configuration);
            ValidateException("ListBudgetLimitByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetLimitArray</returns>
        public async Task<BudgetLimitArray> ListBudgetLimitByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<BudgetLimitArray> localVarResponse = await ListBudgetLimitByCurrencyWithHttpInfoAsync(code, xTraceId, page, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        public async Task<ApiResponse<BudgetLimitArray>> ListBudgetLimitByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListBudgetLimitByCurrency(code, xTraceId, page, start, end, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<BudgetLimitArray>("/v1/currencies/{code}/budget_limits", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListBudgetLimitByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListCurrency(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListCurrency" ,operationIndex);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyArray</returns>
        public CurrencyArray ListCurrency(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<CurrencyArray> localVarResponse = ListCurrencyWithHttpInfo(xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyArray</returns>
        public ApiResponse<CurrencyArray> ListCurrencyWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListCurrency(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<CurrencyArray>("/v1/currencies", localVarRequestOptions, Configuration);
            ValidateException("ListCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyArray</returns>
        public async Task<CurrencyArray> ListCurrencyAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencyArray> localVarResponse = await ListCurrencyWithHttpInfoAsync(xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyArray)</returns>
        public async Task<ApiResponse<CurrencyArray>> ListCurrencyWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListCurrency(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<CurrencyArray>("/v1/currencies", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListRecurrenceByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListRecurrenceByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRecurrenceByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListRecurrenceByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        public RecurrenceArray ListRecurrenceByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<RecurrenceArray> localVarResponse = ListRecurrenceByCurrencyWithHttpInfo(code, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        public ApiResponse<RecurrenceArray> ListRecurrenceByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRecurrenceByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<RecurrenceArray>("/v1/currencies/{code}/recurrences", localVarRequestOptions, Configuration);
            ValidateException("ListRecurrenceByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        public async Task<RecurrenceArray> ListRecurrenceByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RecurrenceArray> localVarResponse = await ListRecurrenceByCurrencyWithHttpInfoAsync(code, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        public async Task<ApiResponse<RecurrenceArray>> ListRecurrenceByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRecurrenceByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<RecurrenceArray>("/v1/currencies/{code}/recurrences", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListRecurrenceByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListRuleByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListRuleByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRuleByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListRuleByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleArray</returns>
        public RuleArray ListRuleByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<RuleArray> localVarResponse = ListRuleByCurrencyWithHttpInfo(code, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleArray</returns>
        public ApiResponse<RuleArray> ListRuleByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRuleByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<RuleArray>("/v1/currencies/{code}/rules", localVarRequestOptions, Configuration);
            ValidateException("ListRuleByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleArray</returns>
        public async Task<RuleArray> ListRuleByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RuleArray> localVarResponse = await ListRuleByCurrencyWithHttpInfoAsync(code, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        public async Task<ApiResponse<RuleArray>> ListRuleByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRuleByCurrency(code, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<RuleArray>("/v1/currencies/{code}/rules", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListRuleByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListTransactionByCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsListTransactionByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListTransactionByCurrency");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.ListTransactionByCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByCurrency(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            ApiResponse<TransactionArray> localVarResponse = ListTransactionByCurrencyWithHttpInfo(code, xTraceId, page, start, end, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public ApiResponse<TransactionArray> ListTransactionByCurrencyWithHttpInfo(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByCurrency(code, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<TransactionArray>("/v1/currencies/{code}/transactions", localVarRequestOptions, Configuration);
            ValidateException("ListTransactionByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        public async Task<TransactionArray> ListTransactionByCurrencyAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TransactionArray> localVarResponse = await ListTransactionByCurrencyWithHttpInfoAsync(code, xTraceId, page, start, end, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async Task<ApiResponse<TransactionArray>> ListTransactionByCurrencyWithHttpInfoAsync(string code, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByCurrency(code, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<TransactionArray>("/v1/currencies/{code}/transactions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListTransactionByCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for StoreCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsStoreCurrency(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'currencyStore' is set
            if (currencyStore == null)
            {
                throw new ApiException(400, "Missing required parameter 'currencyStore' when calling CurrenciesApi->StoreCurrency");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.StoreCurrency" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = currencyStore;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle StoreCurrency(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = StoreCurrencyWithHttpInfo(currencyStore, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> StoreCurrencyWithHttpInfo(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreCurrency(currencyStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<CurrencySingle>("/v1/currencies", localVarRequestOptions, Configuration);
            ValidateException("StoreCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> StoreCurrencyAsync(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await StoreCurrencyWithHttpInfoAsync(currencyStore, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyStore">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> StoreCurrencyWithHttpInfoAsync(CurrencyStore currencyStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreCurrency(currencyStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<CurrencySingle>("/v1/currencies", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("StoreCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for UpdateCurrency.
        /// </summary>
		private RequestOptions GetRequestOptionsUpdateCurrency(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->UpdateCurrency");
            }

            // verify the required parameter 'currencyUpdate' is set
            if (currencyUpdate == null)
            {
                throw new ApiException(400, "Missing required parameter 'currencyUpdate' when calling CurrenciesApi->UpdateCurrency");
            }

            string[] _contentTypes = new string[] {
                "application/vnd.api+json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"CurrenciesApi.UpdateCurrency" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("code", ClientUtils.ParameterToString(code)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = currencyUpdate;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle UpdateCurrency(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<CurrencySingle> localVarResponse = UpdateCurrencyWithHttpInfo(code, currencyUpdate, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public ApiResponse<CurrencySingle> UpdateCurrencyWithHttpInfo(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateCurrency(code, currencyUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Put<CurrencySingle>("/v1/currencies/{code}", localVarRequestOptions, Configuration);
            ValidateException("UpdateCurrency", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async Task<CurrencySingle> UpdateCurrencyAsync(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<CurrencySingle> localVarResponse = await UpdateCurrencyWithHttpInfoAsync(code, currencyUpdate, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currencyUpdate">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async Task<ApiResponse<CurrencySingle>> UpdateCurrencyWithHttpInfoAsync(string code, CurrencyUpdate currencyUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateCurrency(code, currencyUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<CurrencySingle>("/v1/currencies/{code}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("UpdateCurrency", localVarResponse);
            return localVarResponse;
        }
    }
}
