/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle DefaultCurrency(string code, int operationIndex = 0);

        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> DefaultCurrencyWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCurrency(string code, int operationIndex = 0);

        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCurrencyWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle DisableCurrency(int code, int operationIndex = 0);

        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> DisableCurrencyWithHttpInfo(int code, int operationIndex = 0);
        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle EnableCurrency(string code, int operationIndex = 0);

        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> EnableCurrencyWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle GetCurrency(string code, int operationIndex = 0);

        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> GetCurrencyWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountArray</returns>
        AccountArray ListAccountByCurrency(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0);

        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountArray</returns>
        ApiResponse<AccountArray> ListAccountByCurrencyWithHttpInfo(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0);
        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        AvailableBudgetArray ListAvailableBudgetByCurrency(string code, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        ApiResponse<AvailableBudgetArray> ListAvailableBudgetByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BillArray</returns>
        BillArray ListBillByCurrency(string code, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BillArray</returns>
        ApiResponse<BillArray> ListBillByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetLimitArray</returns>
        BudgetLimitArray ListBudgetLimitByCurrency(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        ApiResponse<BudgetLimitArray> ListBudgetLimitByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyArray</returns>
        CurrencyArray ListCurrency(int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyArray</returns>
        ApiResponse<CurrencyArray> ListCurrencyWithHttpInfo(int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all known exchange rates with (from or to) this currency.
        /// </summary>
        /// <remarks>
        /// List all known exchange rates.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExchangeRateArray</returns>
        ExchangeRateArray ListExchangeRateByCurrency(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List all known exchange rates with (from or to) this currency.
        /// </summary>
        /// <remarks>
        /// List all known exchange rates.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExchangeRateArray</returns>
        ApiResponse<ExchangeRateArray> ListExchangeRateByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        RecurrenceArray ListRecurrenceByCurrency(string code, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        ApiResponse<RecurrenceArray> ListRecurrenceByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleArray</returns>
        RuleArray ListRuleByCurrency(string code, int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleArray</returns>
        ApiResponse<RuleArray> ListRuleByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByCurrency(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0);

        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0);
        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle StoreCurrency(Currency currency, int operationIndex = 0);

        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> StoreCurrencyWithHttpInfo(Currency currency, int operationIndex = 0);
        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        CurrencySingle UpdateCurrency(string code, Currency currency, int operationIndex = 0);

        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        ApiResponse<CurrencySingle> UpdateCurrencyWithHttpInfo(string code, Currency currency, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> DefaultCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make currency default currency.
        /// </summary>
        /// <remarks>
        /// Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> DefaultCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a currency.
        /// </summary>
        /// <remarks>
        /// Delete a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> DisableCurrencyAsync(int code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable a currency.
        /// </summary>
        /// <remarks>
        /// Disable a currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> DisableCurrencyWithHttpInfoAsync(int code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> EnableCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable a single currency.
        /// </summary>
        /// <remarks>
        /// Enable a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> EnableCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> GetCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single currency.
        /// </summary>
        /// <remarks>
        /// Get a single currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> GetCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountArray</returns>
        System.Threading.Tasks.Task<AccountArray> ListAccountByCurrencyAsync(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all accounts with this currency.
        /// </summary>
        /// <remarks>
        /// List all accounts with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountArray>> ListAccountByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all available budgets with this currency.
        /// </summary>
        /// <remarks>
        /// List all available budgets with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetArray>> ListAvailableBudgetByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BillArray</returns>
        System.Threading.Tasks.Task<BillArray> ListBillByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all bills with this currency.
        /// </summary>
        /// <remarks>
        /// List all bills with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BillArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillArray>> ListBillByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetLimitArray</returns>
        System.Threading.Tasks.Task<BudgetLimitArray> ListBudgetLimitByCurrencyAsync(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all budget limits with this currency
        /// </summary>
        /// <remarks>
        /// List all budget limits with this currency
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<BudgetLimitArray>> ListBudgetLimitByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyArray</returns>
        System.Threading.Tasks.Task<CurrencyArray> ListCurrencyAsync(int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all currencies.
        /// </summary>
        /// <remarks>
        /// List all currencies.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyArray>> ListCurrencyWithHttpInfoAsync(int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all known exchange rates with (from or to) this currency.
        /// </summary>
        /// <remarks>
        /// List all known exchange rates.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangeRateArray</returns>
        System.Threading.Tasks.Task<ExchangeRateArray> ListExchangeRateByCurrencyAsync(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all known exchange rates with (from or to) this currency.
        /// </summary>
        /// <remarks>
        /// List all known exchange rates.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExchangeRateArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangeRateArray>> ListExchangeRateByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        System.Threading.Tasks.Task<RecurrenceArray> ListRecurrenceByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all recurring transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecurrenceArray>> ListRecurrenceByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleArray</returns>
        System.Threading.Tasks.Task<RuleArray> ListRuleByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all rules with this currency.
        /// </summary>
        /// <remarks>
        /// List all rules with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<RuleArray>> ListRuleByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        System.Threading.Tasks.Task<TransactionArray> ListTransactionByCurrencyAsync(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all transactions with this currency.
        /// </summary>
        /// <remarks>
        /// List all transactions with this currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionArray>> ListTransactionByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> StoreCurrencyAsync(Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store a new currency
        /// </summary>
        /// <remarks>
        /// Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> StoreCurrencyWithHttpInfoAsync(Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        System.Threading.Tasks.Task<CurrencySingle> UpdateCurrencyAsync(string code, Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update existing currency.
        /// </summary>
        /// <remarks>
        /// Update existing currency.
        /// </remarks>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencySingle>> UpdateCurrencyWithHttpInfoAsync(string code, Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApi : ICurrenciesApiSync, ICurrenciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrenciesApi : ICurrenciesApi
    {
        private FireflyIIINet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi(string basePath)
        {
            this.Configuration = FireflyIIINet.Client.Configuration.MergeConfigurations(
                FireflyIIINet.Client.GlobalConfiguration.Instance,
                new FireflyIIINet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIIINet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIIINet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIIINet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesApi(FireflyIIINet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIIINet.Client.Configuration.MergeConfigurations(
                FireflyIIINet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIIINet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIIINet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIIINet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CurrenciesApi(FireflyIIINet.Client.ISynchronousClient client, FireflyIIINet.Client.IAsynchronousClient asyncClient, FireflyIIINet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIIINet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIIINet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIIINet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIIINet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIIINet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle DefaultCurrency(string code, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = DefaultCurrencyWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> DefaultCurrencyWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DefaultCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DefaultCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CurrencySingle>("/api/v1/currencies/{code}/default", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefaultCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> DefaultCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await DefaultCurrencyWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make currency default currency. Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> DefaultCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DefaultCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DefaultCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CurrencySingle>("/api/v1/currencies/{code}/default", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DefaultCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCurrency(string code, int operationIndex = 0)
        {
            DeleteCurrencyWithHttpInfo(code);
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIIINet.Client.ApiResponse<Object> DeleteCurrencyWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DeleteCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DeleteCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCurrencyWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a currency. Delete a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<Object>> DeleteCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->DeleteCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DeleteCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle DisableCurrency(int code, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = DisableCurrencyWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> DisableCurrencyWithHttpInfo(int code, int operationIndex = 0)
        {
            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DisableCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CurrencySingle>("/api/v1/currencies/{code}/disable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> DisableCurrencyAsync(int code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await DisableCurrencyWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a currency. Disable a currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> DisableCurrencyWithHttpInfoAsync(int code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.DisableCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CurrencySingle>("/api/v1/currencies/{code}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle EnableCurrency(string code, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = EnableCurrencyWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> EnableCurrencyWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->EnableCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.EnableCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CurrencySingle>("/api/v1/currencies/{code}/enable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> EnableCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await EnableCurrencyWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a single currency. Enable a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> EnableCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->EnableCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.EnableCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CurrencySingle>("/api/v1/currencies/{code}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle GetCurrency(string code, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = GetCurrencyWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> GetCurrencyWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->GetCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.GetCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencySingle>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> GetCurrencyAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await GetCurrencyWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single currency. Get a single currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> GetCurrencyWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->GetCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "CurrenciesApi.GetCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencySingle>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountArray</returns>
        public AccountArray ListAccountByCurrency(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<AccountArray> localVarResponse = ListAccountByCurrencyWithHttpInfo(code, page, date, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountArray</returns>
        public FireflyIIINet.Client.ApiResponse<AccountArray> ListAccountByCurrencyWithHttpInfo(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAccountByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListAccountByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountArray>("/api/v1/currencies/{code}/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountArray</returns>
        public async System.Threading.Tasks.Task<AccountArray> ListAccountByCurrencyAsync(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<AccountArray> localVarResponse = await ListAccountByCurrencyWithHttpInfoAsync(code, page, date, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts with this currency. List all accounts with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account&#39;s balance on that day.  (optional)</param>
        /// <param name="type">Optional filter on the account type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<AccountArray>> ListAccountByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), string date = default(string), AccountTypeFilter type = default(AccountTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAccountByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListAccountByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountArray>("/api/v1/currencies/{code}/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        public AvailableBudgetArray ListAvailableBudgetByCurrency(string code, int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<AvailableBudgetArray> localVarResponse = ListAvailableBudgetByCurrencyWithHttpInfo(code, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        public FireflyIIINet.Client.ApiResponse<AvailableBudgetArray> ListAvailableBudgetByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAvailableBudgetByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListAvailableBudgetByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AvailableBudgetArray>("/api/v1/currencies/{code}/available_budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudgetByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<AvailableBudgetArray> localVarResponse = await ListAvailableBudgetByCurrencyWithHttpInfoAsync(code, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budgets with this currency. List all available budgets with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<AvailableBudgetArray>> ListAvailableBudgetByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListAvailableBudgetByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListAvailableBudgetByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableBudgetArray>("/api/v1/currencies/{code}/available_budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudgetByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BillArray</returns>
        public BillArray ListBillByCurrency(string code, int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<BillArray> localVarResponse = ListBillByCurrencyWithHttpInfo(code, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BillArray</returns>
        public FireflyIIINet.Client.ApiResponse<BillArray> ListBillByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBillByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListBillByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BillArray>("/api/v1/currencies/{code}/bills", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBillByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BillArray</returns>
        public async System.Threading.Tasks.Task<BillArray> ListBillByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<BillArray> localVarResponse = await ListBillByCurrencyWithHttpInfoAsync(code, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all bills with this currency. List all bills with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BillArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<BillArray>> ListBillByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBillByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListBillByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BillArray>("/api/v1/currencies/{code}/bills", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBillByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BudgetLimitArray</returns>
        public BudgetLimitArray ListBudgetLimitByCurrency(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<BudgetLimitArray> localVarResponse = ListBudgetLimitByCurrencyWithHttpInfo(code, page, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BudgetLimitArray</returns>
        public FireflyIIINet.Client.ApiResponse<BudgetLimitArray> ListBudgetLimitByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBudgetLimitByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListBudgetLimitByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BudgetLimitArray>("/api/v1/currencies/{code}/budget_limits", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudgetLimitByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BudgetLimitArray</returns>
        public async System.Threading.Tasks.Task<BudgetLimitArray> ListBudgetLimitByCurrencyAsync(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<BudgetLimitArray> localVarResponse = await ListBudgetLimitByCurrencyWithHttpInfoAsync(code, page, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all budget limits with this currency List all budget limits with this currency
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">Start date for the budget limit list. (optional)</param>
        /// <param name="end">End date for the budget limit list. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BudgetLimitArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<BudgetLimitArray>> ListBudgetLimitByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListBudgetLimitByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListBudgetLimitByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BudgetLimitArray>("/api/v1/currencies/{code}/budget_limits", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBudgetLimitByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencyArray</returns>
        public CurrencyArray ListCurrency(int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencyArray> localVarResponse = ListCurrencyWithHttpInfo(page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencyArray</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencyArray> ListCurrencyWithHttpInfo(int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CurrencyArray>("/api/v1/currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencyArray</returns>
        public async System.Threading.Tasks.Task<CurrencyArray> ListCurrencyAsync(int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencyArray> localVarResponse = await ListCurrencyWithHttpInfoAsync(page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all currencies. List all currencies.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencyArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencyArray>> ListCurrencyWithHttpInfoAsync(int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CurrencyArray>("/api/v1/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all known exchange rates with (from or to) this currency. List all known exchange rates.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExchangeRateArray</returns>
        public ExchangeRateArray ListExchangeRateByCurrency(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<ExchangeRateArray> localVarResponse = ListExchangeRateByCurrencyWithHttpInfo(code, page, date, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all known exchange rates with (from or to) this currency. List all known exchange rates.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExchangeRateArray</returns>
        public FireflyIIINet.Client.ApiResponse<ExchangeRateArray> ListExchangeRateByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListExchangeRateByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListExchangeRateByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExchangeRateArray>("/api/v1/currencies/{code}/cer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListExchangeRateByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all known exchange rates with (from or to) this currency. List all known exchange rates.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExchangeRateArray</returns>
        public async System.Threading.Tasks.Task<ExchangeRateArray> ListExchangeRateByCurrencyAsync(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<ExchangeRateArray> localVarResponse = await ListExchangeRateByCurrencyWithHttpInfoAsync(code, page, date, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all known exchange rates with (from or to) this currency. List all known exchange rates.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="date">The date of which you want to know the exchange rate  (optional)</param>
        /// <param name="start">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="end">Use this instead of the date parameter to search for a range of currency exchange values.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExchangeRateArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<ExchangeRateArray>> ListExchangeRateByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? date = default(DateTime?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListExchangeRateByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListExchangeRateByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExchangeRateArray>("/api/v1/currencies/{code}/cer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListExchangeRateByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        public RecurrenceArray ListRecurrenceByCurrency(string code, int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<RecurrenceArray> localVarResponse = ListRecurrenceByCurrencyWithHttpInfo(code, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        public FireflyIIINet.Client.ApiResponse<RecurrenceArray> ListRecurrenceByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRecurrenceByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListRecurrenceByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RecurrenceArray>("/api/v1/currencies/{code}/recurrences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecurrenceByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        public async System.Threading.Tasks.Task<RecurrenceArray> ListRecurrenceByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<RecurrenceArray> localVarResponse = await ListRecurrenceByCurrencyWithHttpInfoAsync(code, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions with this currency. List all recurring transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<RecurrenceArray>> ListRecurrenceByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRecurrenceByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListRecurrenceByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RecurrenceArray>("/api/v1/currencies/{code}/recurrences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRecurrenceByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RuleArray</returns>
        public RuleArray ListRuleByCurrency(string code, int? page = default(int?), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<RuleArray> localVarResponse = ListRuleByCurrencyWithHttpInfo(code, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RuleArray</returns>
        public FireflyIIINet.Client.ApiResponse<RuleArray> ListRuleByCurrencyWithHttpInfo(string code, int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRuleByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListRuleByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RuleArray>("/api/v1/currencies/{code}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuleByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RuleArray</returns>
        public async System.Threading.Tasks.Task<RuleArray> ListRuleByCurrencyAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<RuleArray> localVarResponse = await ListRuleByCurrencyWithHttpInfoAsync(code, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all rules with this currency. List all rules with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination per 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RuleArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<RuleArray>> ListRuleByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListRuleByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListRuleByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RuleArray>("/api/v1/currencies/{code}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRuleByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByCurrency(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<TransactionArray> localVarResponse = ListTransactionByCurrencyWithHttpInfo(code, page, startDate, endDate, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public FireflyIIINet.Client.ApiResponse<TransactionArray> ListTransactionByCurrencyWithHttpInfo(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListTransactionByCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListTransactionByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionArray>("/api/v1/currencies/{code}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        public async System.Threading.Tasks.Task<TransactionArray> ListTransactionByCurrencyAsync(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<TransactionArray> localVarResponse = await ListTransactionByCurrencyWithHttpInfoAsync(code, page, startDate, endDate, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this currency. List all transactions with this currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="page">Page number. The default pagination is per 50. (optional)</param>
        /// <param name="startDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="endDate">A date formatted YYYY-MM-DD, to limit the list of transactions.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<TransactionArray>> ListTransactionByCurrencyWithHttpInfoAsync(string code, int? page = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), TransactionTypeFilter type = default(TransactionTypeFilter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->ListTransactionByCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIIINet.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CurrenciesApi.ListTransactionByCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionArray>("/api/v1/currencies/{code}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransactionByCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle StoreCurrency(Currency currency, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = StoreCurrencyWithHttpInfo(currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> StoreCurrencyWithHttpInfo(Currency currency, int operationIndex = 0)
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'currency' when calling CurrenciesApi->StoreCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "CurrenciesApi.StoreCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CurrencySingle>("/api/v1/currencies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> StoreCurrencyAsync(Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await StoreCurrencyWithHttpInfoAsync(currency, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new currency Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency">JSON array or key&#x3D;value pairs with the necessary currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> StoreCurrencyWithHttpInfoAsync(Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'currency' when calling CurrenciesApi->StoreCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "CurrenciesApi.StoreCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CurrencySingle>("/api/v1/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CurrencySingle</returns>
        public CurrencySingle UpdateCurrency(string code, Currency currency, int operationIndex = 0)
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = UpdateCurrencyWithHttpInfo(code, currency);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CurrencySingle</returns>
        public FireflyIIINet.Client.ApiResponse<CurrencySingle> UpdateCurrencyWithHttpInfo(string code, Currency currency, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->UpdateCurrency");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'currency' when calling CurrenciesApi->UpdateCurrency");
            }

            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "CurrenciesApi.UpdateCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CurrencySingle>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CurrencySingle</returns>
        public async System.Threading.Tasks.Task<CurrencySingle> UpdateCurrencyAsync(string code, Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIIINet.Client.ApiResponse<CurrencySingle> localVarResponse = await UpdateCurrencyWithHttpInfoAsync(code, currency, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing currency. Update existing currency.
        /// </summary>
        /// <exception cref="FireflyIIINet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">The currency code.</param>
        /// <param name="currency">JSON array with updated currency information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CurrencySingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIIINet.Client.ApiResponse<CurrencySingle>> UpdateCurrencyWithHttpInfoAsync(string code, Currency currency, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'code' when calling CurrenciesApi->UpdateCurrency");
            }

            // verify the required parameter 'currency' is set
            if (currency == null)
            {
                throw new FireflyIIINet.Client.ApiException(400, "Missing required parameter 'currency' when calling CurrenciesApi->UpdateCurrency");
            }


            FireflyIIINet.Client.RequestOptions localVarRequestOptions = new FireflyIIINet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIIINet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIIINet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", FireflyIIINet.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = currency;

            localVarRequestOptions.Operation = "CurrenciesApi.UpdateCurrency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CurrencySingle>("/api/v1/currencies/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCurrency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
