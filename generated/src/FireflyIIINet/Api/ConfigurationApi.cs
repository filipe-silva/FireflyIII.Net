/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Firefly III system configuration values.
        /// </summary>
        /// <remarks>
        /// Returns all editable and not-editable configuration values for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ModelConfiguration&gt;</returns>
        List<ModelConfiguration> GetConfiguration(Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Firefly III system configuration values.
        /// </summary>
        /// <remarks>
        /// Returns all editable and not-editable configuration values for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ModelConfiguration&gt;</returns>
        ApiResponse<List<ModelConfiguration>> GetConfigurationWithHttpInfo(Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single Firefly III system configuration value
        /// </summary>
        /// <remarks>
        /// Returns one configuration variable for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigurationSingle</returns>
        ConfigurationSingle GetSingleConfiguration(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single Firefly III system configuration value
        /// </summary>
        /// <remarks>
        /// Returns one configuration variable for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigurationSingle</returns>
        ApiResponse<ConfigurationSingle> GetSingleConfigurationWithHttpInfo(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update configuration value
        /// </summary>
        /// <remarks>
        /// Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigurationSingle</returns>
        ConfigurationSingle SetConfiguration(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Update configuration value
        /// </summary>
        /// <remarks>
        /// Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigurationSingle</returns>
        ApiResponse<ConfigurationSingle> SetConfigurationWithHttpInfo(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Firefly III system configuration values.
        /// </summary>
        /// <remarks>
        /// Returns all editable and not-editable configuration values for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ModelConfiguration&gt;</returns>
        Task<List<ModelConfiguration>> GetConfigurationAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Firefly III system configuration values.
        /// </summary>
        /// <remarks>
        /// Returns all editable and not-editable configuration values for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelConfiguration&gt;)</returns>
        Task<ApiResponse<List<ModelConfiguration>>> GetConfigurationWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single Firefly III system configuration value
        /// </summary>
        /// <remarks>
        /// Returns one configuration variable for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSingle</returns>
        Task<ConfigurationSingle> GetSingleConfigurationAsync(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single Firefly III system configuration value
        /// </summary>
        /// <remarks>
        /// Returns one configuration variable for this Firefly III installation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSingle)</returns>
        Task<ApiResponse<ConfigurationSingle>> GetSingleConfigurationWithHttpInfoAsync(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update configuration value
        /// </summary>
        /// <remarks>
        /// Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSingle</returns>
        Task<ConfigurationSingle> SetConfigurationAsync(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update configuration value
        /// </summary>
        /// <remarks>
        /// Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSingle)</returns>
        Task<ApiResponse<ConfigurationSingle>> SetConfigurationWithHttpInfoAsync(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigurationApi : IConfigurationApiSync, IConfigurationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConfigurationApi : IConfigurationApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigurationApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConfigurationApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConfigurationApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for GetConfiguration.
        /// </summary>
		private RequestOptions GetRequestOptionsGetConfiguration(Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"ConfigurationApi.GetConfiguration" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get Firefly III system configuration values. Returns all editable and not-editable configuration values for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ModelConfiguration&gt;</returns>
        public List<ModelConfiguration> GetConfiguration(Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<List<ModelConfiguration>> localVarResponse = GetConfigurationWithHttpInfo(xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Firefly III system configuration values. Returns all editable and not-editable configuration values for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ModelConfiguration&gt;</returns>
        public ApiResponse<List<ModelConfiguration>> GetConfigurationWithHttpInfo(Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetConfiguration(xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<ModelConfiguration>>("/v1/configuration", localVarRequestOptions, Configuration);
            ValidateException("GetConfiguration", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get Firefly III system configuration values. Returns all editable and not-editable configuration values for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ModelConfiguration&gt;</returns>
        public async Task<List<ModelConfiguration>> GetConfigurationAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<ModelConfiguration>> localVarResponse = await GetConfigurationWithHttpInfoAsync(xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Firefly III system configuration values. Returns all editable and not-editable configuration values for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelConfiguration&gt;)</returns>
        public async Task<ApiResponse<List<ModelConfiguration>>> GetConfigurationWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetConfiguration(xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<ModelConfiguration>>("/v1/configuration", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetConfiguration", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetSingleConfiguration.
        /// </summary>
		private RequestOptions GetRequestOptionsGetSingleConfiguration(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling ConfigurationApi->GetSingleConfiguration");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"ConfigurationApi.GetSingleConfiguration" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single Firefly III system configuration value Returns one configuration variable for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigurationSingle</returns>
        public ConfigurationSingle GetSingleConfiguration(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<ConfigurationSingle> localVarResponse = GetSingleConfigurationWithHttpInfo(name, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Firefly III system configuration value Returns one configuration variable for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigurationSingle</returns>
        public ApiResponse<ConfigurationSingle> GetSingleConfigurationWithHttpInfo(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleConfiguration(name, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<ConfigurationSingle>("/v1/configuration/{name}", localVarRequestOptions, Configuration);
            ValidateException("GetSingleConfiguration", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single Firefly III system configuration value Returns one configuration variable for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSingle</returns>
        public async Task<ConfigurationSingle> GetSingleConfigurationAsync(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<ConfigurationSingle> localVarResponse = await GetSingleConfigurationWithHttpInfoAsync(name, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Firefly III system configuration value Returns one configuration variable for this Firefly III installation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to know.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSingle)</returns>
        public async Task<ApiResponse<ConfigurationSingle>> GetSingleConfigurationWithHttpInfoAsync(ConfigValueFilter name, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetSingleConfiguration(name, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<ConfigurationSingle>("/v1/configuration/{name}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetSingleConfiguration", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for SetConfiguration.
        /// </summary>
		private RequestOptions GetRequestOptionsSetConfiguration(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new ApiException(400, "Missing required parameter 'name' when calling ConfigurationApi->SetConfiguration");
            }

            // verify the required parameter 'value' is set
            if (value == null)
            {
                throw new ApiException(400, "Missing required parameter 'value' when calling ConfigurationApi->SetConfiguration");
            }

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"ConfigurationApi.SetConfiguration" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("name", ClientUtils.ParameterToString(name)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.FormParameters.Add("value", ClientUtils.Serialize(value)); // form parameter

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Update configuration value Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConfigurationSingle</returns>
        public ConfigurationSingle SetConfiguration(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<ConfigurationSingle> localVarResponse = SetConfigurationWithHttpInfo(name, value, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration value Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConfigurationSingle</returns>
        public ApiResponse<ConfigurationSingle> SetConfigurationWithHttpInfo(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsSetConfiguration(name, value, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Put<ConfigurationSingle>("/v1/configuration/{name}", localVarRequestOptions, Configuration);
            ValidateException("SetConfiguration", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Update configuration value Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConfigurationSingle</returns>
        public async Task<ConfigurationSingle> SetConfigurationAsync(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<ConfigurationSingle> localVarResponse = await SetConfigurationWithHttpInfoAsync(name, value, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update configuration value Set a single configuration value. Not all configuration values can be updated so the list of accepted configuration variables is small.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the configuration value you want to update.</param>
        /// <param name="value"></param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConfigurationSingle)</returns>
        public async Task<ApiResponse<ConfigurationSingle>> SetConfigurationWithHttpInfoAsync(ConfigValueUpdateFilter name, PolymorphicProperty value, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsSetConfiguration(name, value, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<ConfigurationSingle>("/v1/configuration/{name}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("SetConfiguration", localVarResponse);
            return localVarResponse;
        }
    }
}
