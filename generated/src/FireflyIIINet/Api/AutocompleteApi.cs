/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutocompleteApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteAccount&gt;</returns>
        List<AutocompleteAccount> GetAccountsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0);

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteAccount&gt;</returns>
        ApiResponse<List<AutocompleteAccount>> GetAccountsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0);
        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteBill&gt;</returns>
        List<AutocompleteBill> GetBillsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteBill&gt;</returns>
        ApiResponse<List<AutocompleteBill>> GetBillsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteBudget&gt;</returns>
        List<AutocompleteBudget> GetBudgetsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteBudget&gt;</returns>
        ApiResponse<List<AutocompleteBudget>> GetBudgetsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCategory&gt;</returns>
        List<AutocompleteCategory> GetCategoriesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCategory&gt;</returns>
        ApiResponse<List<AutocompleteCategory>> GetCategoriesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCurrency&gt;</returns>
        List<AutocompleteCurrency> GetCurrenciesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCurrency&gt;</returns>
        ApiResponse<List<AutocompleteCurrency>> GetCurrenciesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCurrencyCode&gt;</returns>
        List<AutocompleteCurrencyCode> GetCurrenciesCodeAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCurrencyCode&gt;</returns>
        ApiResponse<List<AutocompleteCurrencyCode>> GetCurrenciesCodeACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteObjectGroup&gt;</returns>
        List<AutocompleteObjectGroup> GetObjectGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteObjectGroup&gt;</returns>
        ApiResponse<List<AutocompleteObjectGroup>> GetObjectGroupsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompletePiggy&gt;</returns>
        List<AutocompletePiggy> GetPiggiesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompletePiggy&gt;</returns>
        ApiResponse<List<AutocompletePiggy>> GetPiggiesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompletePiggyBalance&gt;</returns>
        List<AutocompletePiggyBalance> GetPiggiesBalanceAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompletePiggyBalance&gt;</returns>
        ApiResponse<List<AutocompletePiggyBalance>> GetPiggiesBalanceACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRecurrence&gt;</returns>
        List<AutocompleteRecurrence> GetRecurringAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRecurrence&gt;</returns>
        ApiResponse<List<AutocompleteRecurrence>> GetRecurringACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRuleGroup&gt;</returns>
        List<AutocompleteRuleGroup> GetRuleGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRuleGroup&gt;</returns>
        ApiResponse<List<AutocompleteRuleGroup>> GetRuleGroupsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRule&gt;</returns>
        List<AutocompleteRule> GetRulesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRule&gt;</returns>
        ApiResponse<List<AutocompleteRule>> GetRulesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTag&gt;</returns>
        List<AutocompleteTag> GetTagAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTag&gt;</returns>
        ApiResponse<List<AutocompleteTag>> GetTagACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransactionType&gt;</returns>
        List<AutocompleteTransactionType> GetTransactionTypesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransactionType&gt;</returns>
        ApiResponse<List<AutocompleteTransactionType>> GetTransactionTypesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransaction&gt;</returns>
        List<AutocompleteTransaction> GetTransactionsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransaction&gt;</returns>
        ApiResponse<List<AutocompleteTransaction>> GetTransactionsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransactionID&gt;</returns>
        List<AutocompleteTransactionID> GetTransactionsIDAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransactionID&gt;</returns>
        ApiResponse<List<AutocompleteTransactionID>> GetTransactionsIDACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutocompleteApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteAccount&gt;</returns>
        Task<List<AutocompleteAccount>> GetAccountsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteAccount&gt;)</returns>
        Task<ApiResponse<List<AutocompleteAccount>>> GetAccountsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteBill&gt;</returns>
        Task<List<AutocompleteBill>> GetBillsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteBill&gt;)</returns>
        Task<ApiResponse<List<AutocompleteBill>>> GetBillsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteBudget&gt;</returns>
        Task<List<AutocompleteBudget>> GetBudgetsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteBudget&gt;)</returns>
        Task<ApiResponse<List<AutocompleteBudget>>> GetBudgetsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCategory&gt;</returns>
        Task<List<AutocompleteCategory>> GetCategoriesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCategory&gt;)</returns>
        Task<ApiResponse<List<AutocompleteCategory>>> GetCategoriesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCurrency&gt;</returns>
        Task<List<AutocompleteCurrency>> GetCurrenciesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCurrency&gt;)</returns>
        Task<ApiResponse<List<AutocompleteCurrency>>> GetCurrenciesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCurrencyCode&gt;</returns>
        Task<List<AutocompleteCurrencyCode>> GetCurrenciesCodeACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCurrencyCode&gt;)</returns>
        Task<ApiResponse<List<AutocompleteCurrencyCode>>> GetCurrenciesCodeACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteObjectGroup&gt;</returns>
        Task<List<AutocompleteObjectGroup>> GetObjectGroupsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteObjectGroup&gt;)</returns>
        Task<ApiResponse<List<AutocompleteObjectGroup>>> GetObjectGroupsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompletePiggy&gt;</returns>
        Task<List<AutocompletePiggy>> GetPiggiesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompletePiggy&gt;)</returns>
        Task<ApiResponse<List<AutocompletePiggy>>> GetPiggiesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompletePiggyBalance&gt;</returns>
        Task<List<AutocompletePiggyBalance>> GetPiggiesBalanceACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompletePiggyBalance&gt;)</returns>
        Task<ApiResponse<List<AutocompletePiggyBalance>>> GetPiggiesBalanceACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRecurrence&gt;</returns>
        Task<List<AutocompleteRecurrence>> GetRecurringACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRecurrence&gt;)</returns>
        Task<ApiResponse<List<AutocompleteRecurrence>>> GetRecurringACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRuleGroup&gt;</returns>
        Task<List<AutocompleteRuleGroup>> GetRuleGroupsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRuleGroup&gt;)</returns>
        Task<ApiResponse<List<AutocompleteRuleGroup>>> GetRuleGroupsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRule&gt;</returns>
        Task<List<AutocompleteRule>> GetRulesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRule&gt;)</returns>
        Task<ApiResponse<List<AutocompleteRule>>> GetRulesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTag&gt;</returns>
        Task<List<AutocompleteTag>> GetTagACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTag&gt;)</returns>
        Task<ApiResponse<List<AutocompleteTag>>> GetTagACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransactionType&gt;</returns>
        Task<List<AutocompleteTransactionType>> GetTransactionTypesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransactionType&gt;)</returns>
        Task<ApiResponse<List<AutocompleteTransactionType>>> GetTransactionTypesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransaction&gt;</returns>
        Task<List<AutocompleteTransaction>> GetTransactionsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransaction&gt;)</returns>
        Task<ApiResponse<List<AutocompleteTransaction>>> GetTransactionsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransactionID&gt;</returns>
        Task<List<AutocompleteTransactionID>> GetTransactionsIDACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransactionID&gt;)</returns>
        Task<ApiResponse<List<AutocompleteTransactionID>>> GetTransactionsIDACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutocompleteApi : IAutocompleteApiSync, IAutocompleteApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutocompleteApi : IAutocompleteApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutocompleteApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutocompleteApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutocompleteApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutocompleteApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AutocompleteApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for GetAccountsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetAccountsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetAccountsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteAccount&gt;</returns>
        public List<AutocompleteAccount> GetAccountsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteAccount>> localVarResponse = GetAccountsACWithHttpInfo(xTraceId, query, limit, date, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteAccount&gt;</returns>
        public ApiResponse<List<AutocompleteAccount>> GetAccountsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetAccountsAC(xTraceId, query, limit, date, type, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteAccount>>("/v1/autocomplete/accounts", localVarRequestOptions, Configuration);
            ValidateException("GetAccountsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteAccount&gt;</returns>
        public async Task<List<AutocompleteAccount>> GetAccountsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteAccount>> localVarResponse = await GetAccountsACWithHttpInfoAsync(xTraceId, query, limit, date, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all accounts of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="date">If the account is an asset account or a liability, the autocomplete will also return the balance of the account on this date. (optional)</param>
        /// <param name="type">Optional filter on the account type(s) used in the autocomplete. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteAccount&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteAccount>>> GetAccountsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), string? date = default(string?), AccountTypeFilter? type = default(AccountTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetAccountsAC(xTraceId, query, limit, date, type, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteAccount>>("/v1/autocomplete/accounts", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetAccountsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetBillsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetBillsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetBillsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteBill&gt;</returns>
        public List<AutocompleteBill> GetBillsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteBill>> localVarResponse = GetBillsACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteBill&gt;</returns>
        public ApiResponse<List<AutocompleteBill>> GetBillsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetBillsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteBill>>("/v1/autocomplete/bills", localVarRequestOptions, Configuration);
            ValidateException("GetBillsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteBill&gt;</returns>
        public async Task<List<AutocompleteBill>> GetBillsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteBill>> localVarResponse = await GetBillsACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all bills of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteBill&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteBill>>> GetBillsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetBillsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteBill>>("/v1/autocomplete/bills", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetBillsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetBudgetsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetBudgetsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetBudgetsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteBudget&gt;</returns>
        public List<AutocompleteBudget> GetBudgetsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteBudget>> localVarResponse = GetBudgetsACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteBudget&gt;</returns>
        public ApiResponse<List<AutocompleteBudget>> GetBudgetsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetBudgetsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteBudget>>("/v1/autocomplete/budgets", localVarRequestOptions, Configuration);
            ValidateException("GetBudgetsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteBudget&gt;</returns>
        public async Task<List<AutocompleteBudget>> GetBudgetsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteBudget>> localVarResponse = await GetBudgetsACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all budgets of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteBudget&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteBudget>>> GetBudgetsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetBudgetsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteBudget>>("/v1/autocomplete/budgets", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetBudgetsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetCategoriesAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetCategoriesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetCategoriesAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCategory&gt;</returns>
        public List<AutocompleteCategory> GetCategoriesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteCategory>> localVarResponse = GetCategoriesACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCategory&gt;</returns>
        public ApiResponse<List<AutocompleteCategory>> GetCategoriesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCategoriesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteCategory>>("/v1/autocomplete/categories", localVarRequestOptions, Configuration);
            ValidateException("GetCategoriesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCategory&gt;</returns>
        public async Task<List<AutocompleteCategory>> GetCategoriesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteCategory>> localVarResponse = await GetCategoriesACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all categories of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCategory&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteCategory>>> GetCategoriesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCategoriesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteCategory>>("/v1/autocomplete/categories", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetCategoriesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetCurrenciesAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetCurrenciesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetCurrenciesAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCurrency&gt;</returns>
        public List<AutocompleteCurrency> GetCurrenciesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteCurrency>> localVarResponse = GetCurrenciesACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCurrency&gt;</returns>
        public ApiResponse<List<AutocompleteCurrency>> GetCurrenciesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrenciesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteCurrency>>("/v1/autocomplete/currencies", localVarRequestOptions, Configuration);
            ValidateException("GetCurrenciesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCurrency&gt;</returns>
        public async Task<List<AutocompleteCurrency>> GetCurrenciesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteCurrency>> localVarResponse = await GetCurrenciesACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCurrency&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteCurrency>>> GetCurrenciesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrenciesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteCurrency>>("/v1/autocomplete/currencies", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetCurrenciesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetCurrenciesCodeAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetCurrenciesCodeAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetCurrenciesCodeAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteCurrencyCode&gt;</returns>
        public List<AutocompleteCurrencyCode> GetCurrenciesCodeAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteCurrencyCode>> localVarResponse = GetCurrenciesCodeACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteCurrencyCode&gt;</returns>
        public ApiResponse<List<AutocompleteCurrencyCode>> GetCurrenciesCodeACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrenciesCodeAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteCurrencyCode>>("/v1/autocomplete/currencies-with-code", localVarRequestOptions, Configuration);
            ValidateException("GetCurrenciesCodeAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteCurrencyCode&gt;</returns>
        public async Task<List<AutocompleteCurrencyCode>> GetCurrenciesCodeACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteCurrencyCode>> localVarResponse = await GetCurrenciesCodeACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteCurrencyCode&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteCurrencyCode>>> GetCurrenciesCodeACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetCurrenciesCodeAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteCurrencyCode>>("/v1/autocomplete/currencies-with-code", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetCurrenciesCodeAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetObjectGroupsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetObjectGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetObjectGroupsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteObjectGroup&gt;</returns>
        public List<AutocompleteObjectGroup> GetObjectGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteObjectGroup>> localVarResponse = GetObjectGroupsACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteObjectGroup&gt;</returns>
        public ApiResponse<List<AutocompleteObjectGroup>> GetObjectGroupsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetObjectGroupsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteObjectGroup>>("/v1/autocomplete/object-groups", localVarRequestOptions, Configuration);
            ValidateException("GetObjectGroupsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteObjectGroup&gt;</returns>
        public async Task<List<AutocompleteObjectGroup>> GetObjectGroupsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteObjectGroup>> localVarResponse = await GetObjectGroupsACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all object groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteObjectGroup&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteObjectGroup>>> GetObjectGroupsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetObjectGroupsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteObjectGroup>>("/v1/autocomplete/object-groups", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetObjectGroupsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetPiggiesAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetPiggiesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetPiggiesAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompletePiggy&gt;</returns>
        public List<AutocompletePiggy> GetPiggiesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompletePiggy>> localVarResponse = GetPiggiesACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompletePiggy&gt;</returns>
        public ApiResponse<List<AutocompletePiggy>> GetPiggiesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetPiggiesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompletePiggy>>("/v1/autocomplete/piggy-banks", localVarRequestOptions, Configuration);
            ValidateException("GetPiggiesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompletePiggy&gt;</returns>
        public async Task<List<AutocompletePiggy>> GetPiggiesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompletePiggy>> localVarResponse = await GetPiggiesACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompletePiggy&gt;)</returns>
        public async Task<ApiResponse<List<AutocompletePiggy>>> GetPiggiesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetPiggiesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompletePiggy>>("/v1/autocomplete/piggy-banks", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetPiggiesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetPiggiesBalanceAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetPiggiesBalanceAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetPiggiesBalanceAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompletePiggyBalance&gt;</returns>
        public List<AutocompletePiggyBalance> GetPiggiesBalanceAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompletePiggyBalance>> localVarResponse = GetPiggiesBalanceACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompletePiggyBalance&gt;</returns>
        public ApiResponse<List<AutocompletePiggyBalance>> GetPiggiesBalanceACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetPiggiesBalanceAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompletePiggyBalance>>("/v1/autocomplete/piggy-banks-with-balance", localVarRequestOptions, Configuration);
            ValidateException("GetPiggiesBalanceAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompletePiggyBalance&gt;</returns>
        public async Task<List<AutocompletePiggyBalance>> GetPiggiesBalanceACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompletePiggyBalance>> localVarResponse = await GetPiggiesBalanceACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompletePiggyBalance&gt;)</returns>
        public async Task<ApiResponse<List<AutocompletePiggyBalance>>> GetPiggiesBalanceACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetPiggiesBalanceAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompletePiggyBalance>>("/v1/autocomplete/piggy-banks-with-balance", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetPiggiesBalanceAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetRecurringAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetRecurringAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetRecurringAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRecurrence&gt;</returns>
        public List<AutocompleteRecurrence> GetRecurringAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteRecurrence>> localVarResponse = GetRecurringACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRecurrence&gt;</returns>
        public ApiResponse<List<AutocompleteRecurrence>> GetRecurringACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRecurringAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteRecurrence>>("/v1/autocomplete/recurring", localVarRequestOptions, Configuration);
            ValidateException("GetRecurringAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRecurrence&gt;</returns>
        public async Task<List<AutocompleteRecurrence>> GetRecurringACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteRecurrence>> localVarResponse = await GetRecurringACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all recurring transactions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRecurrence&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteRecurrence>>> GetRecurringACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRecurringAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteRecurrence>>("/v1/autocomplete/recurring", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetRecurringAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetRuleGroupsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetRuleGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetRuleGroupsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRuleGroup&gt;</returns>
        public List<AutocompleteRuleGroup> GetRuleGroupsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteRuleGroup>> localVarResponse = GetRuleGroupsACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRuleGroup&gt;</returns>
        public ApiResponse<List<AutocompleteRuleGroup>> GetRuleGroupsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRuleGroupsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteRuleGroup>>("/v1/autocomplete/rule-groups", localVarRequestOptions, Configuration);
            ValidateException("GetRuleGroupsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRuleGroup&gt;</returns>
        public async Task<List<AutocompleteRuleGroup>> GetRuleGroupsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteRuleGroup>> localVarResponse = await GetRuleGroupsACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all rule groups of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRuleGroup&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteRuleGroup>>> GetRuleGroupsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRuleGroupsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteRuleGroup>>("/v1/autocomplete/rule-groups", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetRuleGroupsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetRulesAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetRulesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetRulesAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteRule&gt;</returns>
        public List<AutocompleteRule> GetRulesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteRule>> localVarResponse = GetRulesACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteRule&gt;</returns>
        public ApiResponse<List<AutocompleteRule>> GetRulesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRulesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteRule>>("/v1/autocomplete/rules", localVarRequestOptions, Configuration);
            ValidateException("GetRulesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteRule&gt;</returns>
        public async Task<List<AutocompleteRule>> GetRulesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteRule>> localVarResponse = await GetRulesACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all rules of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteRule&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteRule>>> GetRulesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRulesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteRule>>("/v1/autocomplete/rules", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetRulesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetTagAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetTagAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetTagAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTag&gt;</returns>
        public List<AutocompleteTag> GetTagAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteTag>> localVarResponse = GetTagACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTag&gt;</returns>
        public ApiResponse<List<AutocompleteTag>> GetTagACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTagAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteTag>>("/v1/autocomplete/tags", localVarRequestOptions, Configuration);
            ValidateException("GetTagAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTag&gt;</returns>
        public async Task<List<AutocompleteTag>> GetTagACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteTag>> localVarResponse = await GetTagACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all tags of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTag&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteTag>>> GetTagACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTagAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteTag>>("/v1/autocomplete/tags", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetTagAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetTransactionTypesAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetTransactionTypesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetTransactionTypesAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransactionType&gt;</returns>
        public List<AutocompleteTransactionType> GetTransactionTypesAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteTransactionType>> localVarResponse = GetTransactionTypesACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransactionType&gt;</returns>
        public ApiResponse<List<AutocompleteTransactionType>> GetTransactionTypesACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionTypesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteTransactionType>>("/v1/autocomplete/transaction-types", localVarRequestOptions, Configuration);
            ValidateException("GetTransactionTypesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransactionType&gt;</returns>
        public async Task<List<AutocompleteTransactionType>> GetTransactionTypesACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteTransactionType>> localVarResponse = await GetTransactionTypesACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction types returned in a basic auto-complete array. English only. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransactionType&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteTransactionType>>> GetTransactionTypesACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionTypesAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteTransactionType>>("/v1/autocomplete/transaction-types", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetTransactionTypesAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetTransactionsAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetTransactionsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetTransactionsAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransaction&gt;</returns>
        public List<AutocompleteTransaction> GetTransactionsAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteTransaction>> localVarResponse = GetTransactionsACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransaction&gt;</returns>
        public ApiResponse<List<AutocompleteTransaction>> GetTransactionsACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteTransaction>>("/v1/autocomplete/transactions", localVarRequestOptions, Configuration);
            ValidateException("GetTransactionsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransaction&gt;</returns>
        public async Task<List<AutocompleteTransaction>> GetTransactionsACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteTransaction>> localVarResponse = await GetTransactionsACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transaction descriptions of the user returned in a basic auto-complete array. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransaction&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteTransaction>>> GetTransactionsACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionsAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteTransaction>>("/v1/autocomplete/transactions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetTransactionsAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetTransactionsIDAC.
        /// </summary>
		private RequestOptions GetRequestOptionsGetTransactionsIDAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"AutocompleteApi.GetTransactionsIDAC" ,operationIndex);

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AutocompleteTransactionID&gt;</returns>
        public List<AutocompleteTransactionID> GetTransactionsIDAC(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            ApiResponse<List<AutocompleteTransactionID>> localVarResponse = GetTransactionsIDACWithHttpInfo(xTraceId, query, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AutocompleteTransactionID&gt;</returns>
        public ApiResponse<List<AutocompleteTransactionID>> GetTransactionsIDACWithHttpInfo(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionsIDAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<List<AutocompleteTransactionID>>("/v1/autocomplete/transactions-with-id", localVarRequestOptions, Configuration);
            ValidateException("GetTransactionsIDAC", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AutocompleteTransactionID&gt;</returns>
        public async Task<List<AutocompleteTransactionID>> GetTransactionsIDACAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<List<AutocompleteTransactionID>> localVarResponse = await GetTransactionsIDACWithHttpInfoAsync(xTraceId, query, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="query">The autocomplete search query. (optional)</param>
        /// <param name="limit">The number of items returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AutocompleteTransactionID&gt;)</returns>
        public async Task<ApiResponse<List<AutocompleteTransactionID>>> GetTransactionsIDACWithHttpInfoAsync(Guid? xTraceId = default(Guid?), string? query = default(string?), int? limit = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTransactionsIDAC(xTraceId, query, limit, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<List<AutocompleteTransactionID>>("/v1/autocomplete/transactions-with-id", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetTransactionsIDAC", localVarResponse);
            return localVarResponse;
        }
    }
}
