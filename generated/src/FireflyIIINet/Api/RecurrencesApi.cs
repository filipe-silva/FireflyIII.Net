/*
 * Firefly III API v2.0.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-05-17T04:54:43+00:00 
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle GetRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> GetRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        RecurrenceArray ListRecurrence(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        ApiResponse<RecurrenceArray> ListRecurrenceWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByRecurrence(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);

        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);
        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle StoreRecurrence(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> StoreRecurrenceWithHttpInfo(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        RecurrenceSingle UpdateRecurrence(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        ApiResponse<RecurrenceSingle> UpdateRecurrenceWithHttpInfo(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a recurring transaction.
        /// </summary>
        /// <remarks>
        /// Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        Task<RecurrenceSingle> GetRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single recurring transaction.
        /// </summary>
        /// <remarks>
        /// Get a single recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        Task<ApiResponse<RecurrenceSingle>> GetRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        Task<RecurrenceArray> ListRecurrenceAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all recurring transactions.
        /// </summary>
        /// <remarks>
        /// List all recurring transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        Task<ApiResponse<RecurrenceArray>> ListRecurrenceWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        Task<TransactionArray> ListTransactionByRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all transactions created by a recurring transaction.
        /// </summary>
        /// <remarks>
        /// List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        Task<ApiResponse<TransactionArray>> ListTransactionByRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        Task<RecurrenceSingle> StoreRecurrenceAsync(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a new recurring transaction
        /// </summary>
        /// <remarks>
        /// Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        Task<ApiResponse<RecurrenceSingle>> StoreRecurrenceWithHttpInfoAsync(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        Task<RecurrenceSingle> UpdateRecurrenceAsync(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update existing recurring transaction.
        /// </summary>
        /// <remarks>
        /// Update existing recurring transaction.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        Task<ApiResponse<RecurrenceSingle>> UpdateRecurrenceWithHttpInfoAsync(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecurrencesApi : IRecurrencesApiSync, IRecurrencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecurrencesApi : IRecurrencesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurrencesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecurrencesApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecurrencesApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecurrencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecurrencesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->DeleteRecurrence");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.DeleteRecurrence" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteRecurrenceWithHttpInfo(id, xTraceId);
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteRecurrence(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/recurrences/{id}", localVarRequestOptions, Configuration);
            ValidateException("DeleteRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteRecurrenceWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a recurring transaction. Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteRecurrence(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/recurrences/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsGetRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->GetRecurrence");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.GetRecurrence" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle GetRecurrence(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<RecurrenceSingle> localVarResponse = GetRecurrenceWithHttpInfo(id, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public ApiResponse<RecurrenceSingle> GetRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRecurrence(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<RecurrenceSingle>("/v1/recurrences/{id}", localVarRequestOptions, Configuration);
            ValidateException("GetRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async Task<RecurrenceSingle> GetRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RecurrenceSingle> localVarResponse = await GetRecurrenceWithHttpInfoAsync(id, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single recurring transaction. Get a single recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async Task<ApiResponse<RecurrenceSingle>> GetRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetRecurrence(id, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<RecurrenceSingle>("/v1/recurrences/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsListRecurrence(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.ListRecurrence" ,operationIndex);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceArray</returns>
        public RecurrenceArray ListRecurrence(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<RecurrenceArray> localVarResponse = ListRecurrenceWithHttpInfo(xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceArray</returns>
        public ApiResponse<RecurrenceArray> ListRecurrenceWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRecurrence(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<RecurrenceArray>("/v1/recurrences", localVarRequestOptions, Configuration);
            ValidateException("ListRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceArray</returns>
        public async Task<RecurrenceArray> ListRecurrenceAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RecurrenceArray> localVarResponse = await ListRecurrenceWithHttpInfoAsync(xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all recurring transactions. List all recurring transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceArray)</returns>
        public async Task<ApiResponse<RecurrenceArray>> ListRecurrenceWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListRecurrence(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<RecurrenceArray>("/v1/recurrences", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListTransactionByRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsListTransactionByRecurrence(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->ListTransactionByRecurrence");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.ListTransactionByRecurrence" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByRecurrence(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            ApiResponse<TransactionArray> localVarResponse = ListTransactionByRecurrenceWithHttpInfo(id, xTraceId, page, start, end, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public ApiResponse<TransactionArray> ListTransactionByRecurrenceWithHttpInfo(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByRecurrence(id, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<TransactionArray>("/v1/recurrences/{id}/transactions", localVarRequestOptions, Configuration);
            ValidateException("ListTransactionByRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        public async Task<TransactionArray> ListTransactionByRecurrenceAsync(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TransactionArray> localVarResponse = await ListTransactionByRecurrenceWithHttpInfoAsync(id, xTraceId, page, start, end, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions created by a recurring transaction. List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. Both the start and end date must be present.  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async Task<ApiResponse<TransactionArray>> ListTransactionByRecurrenceWithHttpInfoAsync(string id, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByRecurrence(id, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<TransactionArray>("/v1/recurrences/{id}/transactions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListTransactionByRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for StoreRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsStoreRecurrence(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'recurrenceStore' is set
            if (recurrenceStore == null)
            {
                throw new ApiException(400, "Missing required parameter 'recurrenceStore' when calling RecurrencesApi->StoreRecurrence");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.StoreRecurrence" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = recurrenceStore;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle StoreRecurrence(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<RecurrenceSingle> localVarResponse = StoreRecurrenceWithHttpInfo(recurrenceStore, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public ApiResponse<RecurrenceSingle> StoreRecurrenceWithHttpInfo(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreRecurrence(recurrenceStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<RecurrenceSingle>("/v1/recurrences", localVarRequestOptions, Configuration);
            ValidateException("StoreRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async Task<RecurrenceSingle> StoreRecurrenceAsync(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RecurrenceSingle> localVarResponse = await StoreRecurrenceWithHttpInfoAsync(recurrenceStore, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new recurring transaction Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurrenceStore">JSON array or key&#x3D;value pairs with the necessary recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async Task<ApiResponse<RecurrenceSingle>> StoreRecurrenceWithHttpInfoAsync(RecurrenceStore recurrenceStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreRecurrence(recurrenceStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<RecurrenceSingle>("/v1/recurrences", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("StoreRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for UpdateRecurrence.
        /// </summary>
		private RequestOptions GetRequestOptionsUpdateRecurrence(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling RecurrencesApi->UpdateRecurrence");
            }

            // verify the required parameter 'recurrenceUpdate' is set
            if (recurrenceUpdate == null)
            {
                throw new ApiException(400, "Missing required parameter 'recurrenceUpdate' when calling RecurrencesApi->UpdateRecurrence");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"RecurrencesApi.UpdateRecurrence" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = recurrenceUpdate;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RecurrenceSingle</returns>
        public RecurrenceSingle UpdateRecurrence(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<RecurrenceSingle> localVarResponse = UpdateRecurrenceWithHttpInfo(id, recurrenceUpdate, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RecurrenceSingle</returns>
        public ApiResponse<RecurrenceSingle> UpdateRecurrenceWithHttpInfo(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateRecurrence(id, recurrenceUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Put<RecurrenceSingle>("/v1/recurrences/{id}", localVarRequestOptions, Configuration);
            ValidateException("UpdateRecurrence", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RecurrenceSingle</returns>
        public async Task<RecurrenceSingle> UpdateRecurrenceAsync(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<RecurrenceSingle> localVarResponse = await UpdateRecurrenceWithHttpInfoAsync(id, recurrenceUpdate, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing recurring transaction. Update existing recurring transaction.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the recurring transaction.</param>
        /// <param name="recurrenceUpdate">JSON array with updated recurring transaction information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RecurrenceSingle)</returns>
        public async Task<ApiResponse<RecurrenceSingle>> UpdateRecurrenceWithHttpInfoAsync(string id, RecurrenceUpdate recurrenceUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateRecurrence(id, recurrenceUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<RecurrenceSingle>("/v1/recurrences/{id}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("UpdateRecurrence", localVarResponse);
            return localVarResponse;
        }
    }
}
