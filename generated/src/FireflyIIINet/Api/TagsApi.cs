/*
 * Firefly III API v2.0.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-05-17T04:54:43+00:00 
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading;
using System.Threading.Tasks;
using FireflyIIINet.Client;
using FireflyIIINet.Client.Auth;
using FireflyIIINet.Model;
using ConfigurationClient = FireflyIIINet.Client.Configuration;

namespace FireflyIIINet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTag(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        TagSingle GetTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> GetTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Lists all attachments.
        /// </summary>
        /// <remarks>
        /// Lists all attachments.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttachmentArray</returns>
        AttachmentArray ListAttachmentByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Lists all attachments.
        /// </summary>
        /// <remarks>
        /// Lists all attachments.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttachmentArray</returns>
        ApiResponse<AttachmentArray> ListAttachmentByTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagArray</returns>
        TagArray ListTag(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagArray</returns>
        ApiResponse<TagArray> ListTagWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        TransactionArray ListTransactionByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);

        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        ApiResponse<TransactionArray> ListTransactionByTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0);
        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        TagSingle StoreTag(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> StoreTagWithHttpInfo(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        TagSingle UpdateTag(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        ApiResponse<TagSingle> UpdateTagWithHttpInfo(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        Task DeleteTagAsync(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an tag.
        /// </summary>
        /// <remarks>
        /// Delete an tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        Task<ApiResponse<Object>> DeleteTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        Task<TagSingle> GetTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single tag.
        /// </summary>
        /// <remarks>
        /// Get a single tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        Task<ApiResponse<TagSingle>> GetTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Lists all attachments.
        /// </summary>
        /// <remarks>
        /// Lists all attachments.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentArray</returns>
        Task<AttachmentArray> ListAttachmentByTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists all attachments.
        /// </summary>
        /// <remarks>
        /// Lists all attachments.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentArray)</returns>
        Task<ApiResponse<AttachmentArray>> ListAttachmentByTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagArray</returns>
        Task<TagArray> ListTagAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all tags.
        /// </summary>
        /// <remarks>
        /// List all of the user&#39;s tags.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagArray)</returns>
        Task<ApiResponse<TagArray>> ListTagWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        Task<TransactionArray> ListTransactionByTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all transactions with this tag.
        /// </summary>
        /// <remarks>
        /// List all transactions with this tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        Task<ApiResponse<TransactionArray>> ListTransactionByTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        Task<TagSingle> StoreTagAsync(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Store a new tag
        /// </summary>
        /// <remarks>
        /// Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        Task<ApiResponse<TagSingle>> StoreTagWithHttpInfoAsync(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        Task<TagSingle> UpdateTagAsync(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update existing tag.
        /// </summary>
        /// <remarks>
        /// Update existing tag.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        Task<ApiResponse<TagSingle>> UpdateTagWithHttpInfoAsync(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagsApi : ITagsApiSync, ITagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagsApi : ITagsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagsApi(string basePath) : this(new ConfigurationClient { BasePath = basePath })
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagsApi(ConfigurationClient configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Configuration = ConfigurationClient.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            Client = new ApiClient(Configuration.BasePath);
            AsynchronousClient = new ApiClient(Configuration.BasePath);
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TagsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = ConfigurationClient.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provides a common RequestOptions object for all operations.
        /// </summary>
		private RequestOptions GetRequestOptions(string[] _contentTypes, string[] _accepts, string operationId, int operationIndex)
		{
            RequestOptions localVarRequestOptions = new RequestOptions();
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = operationId;
            localVarRequestOptions.OperationIndex = operationIndex;

            return localVarRequestOptions;
		}

        /// <summary>
        /// Sets RequestOptions Authorization headers with bearer or oauth.
        /// </summary>
        private RequestOptions SetAuthorization(RequestOptions localVarRequestOptions)
        {
			// oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                         Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            return localVarRequestOptions;
		}

        /// <summary>
        /// Validates if operation has an exception and rethrows it.
        /// </summary>
        private void ValidateException(string operationName, IApiResponse localVarResponse)
        {
            if (ExceptionFactory != null)
            {
                Exception _exception = ExceptionFactory(operationName, localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }
		}

        /// <summary>
        /// Provides a specific RequestOptions object for DeleteTag.
        /// </summary>
		private RequestOptions GetRequestOptionsDeleteTag(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400, "Missing required parameter 'tag' when calling TagsApi->DeleteTag");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.DeleteTag" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("tag", ClientUtils.ParameterToString(tag)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTag(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            DeleteTagWithHttpInfo(tag, xTraceId);
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteTag(tag, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Delete<Object>("/v1/tags/{tag}", localVarRequestOptions, Configuration);
            ValidateException("DeleteTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async Task DeleteTagAsync(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            await DeleteTagWithHttpInfoAsync(tag, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an tag. Delete an tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async Task<ApiResponse<Object>> DeleteTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsDeleteTag(tag, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/v1/tags/{tag}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("DeleteTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for GetTag.
        /// </summary>
		private RequestOptions GetRequestOptionsGetTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400, "Missing required parameter 'tag' when calling TagsApi->GetTag");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.GetTag" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("tag", ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        public TagSingle GetTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<TagSingle> localVarResponse = GetTagWithHttpInfo(tag, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public ApiResponse<TagSingle> GetTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTag(tag, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<TagSingle>("/v1/tags/{tag}", localVarRequestOptions, Configuration);
            ValidateException("GetTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        public async Task<TagSingle> GetTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TagSingle> localVarResponse = await GetTagWithHttpInfoAsync(tag, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single tag. Get a single tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async Task<ApiResponse<TagSingle>> GetTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsGetTag(tag, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<TagSingle>("/v1/tags/{tag}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("GetTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListAttachmentByTag.
        /// </summary>
		private RequestOptions GetRequestOptionsListAttachmentByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400, "Missing required parameter 'tag' when calling TagsApi->ListAttachmentByTag");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.ListAttachmentByTag" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("tag", ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Lists all attachments. Lists all attachments.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AttachmentArray</returns>
        public AttachmentArray ListAttachmentByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<AttachmentArray> localVarResponse = ListAttachmentByTagWithHttpInfo(tag, xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all attachments. Lists all attachments.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AttachmentArray</returns>
        public ApiResponse<AttachmentArray> ListAttachmentByTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAttachmentByTag(tag, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<AttachmentArray>("/v1/tags/{tag}/attachments", localVarRequestOptions, Configuration);
            ValidateException("ListAttachmentByTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Lists all attachments. Lists all attachments.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AttachmentArray</returns>
        public async Task<AttachmentArray> ListAttachmentByTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<AttachmentArray> localVarResponse = await ListAttachmentByTagWithHttpInfoAsync(tag, xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all attachments. Lists all attachments.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AttachmentArray)</returns>
        public async Task<ApiResponse<AttachmentArray>> ListAttachmentByTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListAttachmentByTag(tag, xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<AttachmentArray>("/v1/tags/{tag}/attachments", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListAttachmentByTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListTag.
        /// </summary>
		private RequestOptions GetRequestOptionsListTag(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
		{
            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.ListTag" ,operationIndex);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagArray</returns>
        public TagArray ListTag(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            ApiResponse<TagArray> localVarResponse = ListTagWithHttpInfo(xTraceId, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagArray</returns>
        public ApiResponse<TagArray> ListTagWithHttpInfo(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTag(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<TagArray>("/v1/tags", localVarRequestOptions, Configuration);
            ValidateException("ListTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagArray</returns>
        public async Task<TagArray> ListTagAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TagArray> localVarResponse = await ListTagWithHttpInfoAsync(xTraceId, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all tags. List all of the user&#39;s tags.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagArray)</returns>
        public async Task<ApiResponse<TagArray>> ListTagWithHttpInfoAsync(Guid? xTraceId = default(Guid?), int? page = default(int?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTag(xTraceId, page, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<TagArray>("/v1/tags", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for ListTransactionByTag.
        /// </summary>
		private RequestOptions GetRequestOptionsListTransactionByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
		{
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400, "Missing required parameter 'tag' when calling TagsApi->ListTransactionByTag");
            }

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.ListTransactionByTag" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("tag", ClientUtils.ParameterToString(tag)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionArray</returns>
        public TransactionArray ListTransactionByTag(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            ApiResponse<TransactionArray> localVarResponse = ListTransactionByTagWithHttpInfo(tag, xTraceId, page, start, end, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionArray</returns>
        public ApiResponse<TransactionArray> ListTransactionByTagWithHttpInfo(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByTag(tag, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Get<TransactionArray>("/v1/tags/{tag}/transactions", localVarRequestOptions, Configuration);
            ValidateException("ListTransactionByTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionArray</returns>
        public async Task<TransactionArray> ListTransactionByTagAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TransactionArray> localVarResponse = await ListTransactionByTagWithHttpInfoAsync(tag, xTraceId, page, start, end, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all transactions with this tag. List all transactions with this tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).  (optional)</param>
        /// <param name="type">Optional filter on the transaction type(s) returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionArray)</returns>
        public async Task<ApiResponse<TransactionArray>> ListTransactionByTagWithHttpInfoAsync(string tag, Guid? xTraceId = default(Guid?), int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), TransactionTypeFilter? type = default(TransactionTypeFilter?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsListTransactionByTag(tag, xTraceId, page, start, end, type, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.GetAsync<TransactionArray>("/v1/tags/{tag}/transactions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("ListTransactionByTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for StoreTag.
        /// </summary>
		private RequestOptions GetRequestOptionsStoreTag(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'tagModelStore' is set
            if (tagModelStore == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagModelStore' when calling TagsApi->StoreTag");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.StoreTag" ,operationIndex);

            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = tagModelStore;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        public TagSingle StoreTag(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<TagSingle> localVarResponse = StoreTagWithHttpInfo(tagModelStore, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public ApiResponse<TagSingle> StoreTagWithHttpInfo(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreTag(tagModelStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Post<TagSingle>("/v1/tags", localVarRequestOptions, Configuration);
            ValidateException("StoreTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        public async Task<TagSingle> StoreTagAsync(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TagSingle> localVarResponse = await StoreTagWithHttpInfoAsync(tagModelStore, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new tag Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagModelStore">JSON array or key&#x3D;value pairs with the necessary tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async Task<ApiResponse<TagSingle>> StoreTagWithHttpInfoAsync(TagModelStore tagModelStore, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsStoreTag(tagModelStore, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PostAsync<TagSingle>("/v1/tags", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("StoreTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Provides a specific RequestOptions object for UpdateTag.
        /// </summary>
		private RequestOptions GetRequestOptionsUpdateTag(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
		{
            // verify the required parameter 'tag' is set
            if (tag == null)
            {
                throw new ApiException(400, "Missing required parameter 'tag' when calling TagsApi->UpdateTag");
            }

            // verify the required parameter 'tagModelUpdate' is set
            if (tagModelUpdate == null)
            {
                throw new ApiException(400, "Missing required parameter 'tagModelUpdate' when calling TagsApi->UpdateTag");
            }

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.api+json",
                "application/json"
            };

            RequestOptions localVarRequestOptions = GetRequestOptions(_contentTypes, _accepts,"TagsApi.UpdateTag" ,operationIndex);

            localVarRequestOptions.PathParameters.Add("tag", ClientUtils.ParameterToString(tag)); // path parameter
            if (xTraceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Trace-Id", ClientUtils.ParameterToString(xTraceId)); // header parameter
            }
            localVarRequestOptions.Data = tagModelUpdate;

            // authentication (firefly_iii_auth) required
            localVarRequestOptions = SetAuthorization(localVarRequestOptions);
			return localVarRequestOptions;
		}

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagSingle</returns>
        public TagSingle UpdateTag(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<TagSingle> localVarResponse = UpdateTagWithHttpInfo(tag, tagModelUpdate, xTraceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagSingle</returns>
        public ApiResponse<TagSingle> UpdateTagWithHttpInfo(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateTag(tag, tagModelUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = Client.Put<TagSingle>("/v1/tags/{tag}", localVarRequestOptions, Configuration);
            ValidateException("UpdateTag", localVarResponse);
            return localVarResponse;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagSingle</returns>
        public async Task<TagSingle> UpdateTagAsync(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            ApiResponse<TagSingle> localVarResponse = await UpdateTagWithHttpInfoAsync(tag, tagModelUpdate, xTraceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing tag. Update existing tag.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">Either the tag itself or the tag ID. If you use the tag itself, and it contains international (non-ASCII) characters, your milage may vary.</param>
        /// <param name="tagModelUpdate">JSON array with updated tag information. See the model for the exact specifications.</param>
        /// <param name="xTraceId">Unique identifier associated with this request. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagSingle)</returns>
        public async Task<ApiResponse<TagSingle>> UpdateTagWithHttpInfoAsync(string tag, TagModelUpdate tagModelUpdate, Guid? xTraceId = default(Guid?), int operationIndex = 0, CancellationToken cancellationToken = default(CancellationToken))
        {
            RequestOptions localVarRequestOptions = GetRequestOptionsUpdateTag(tag, tagModelUpdate, xTraceId, operationIndex);

            // make the HTTP request
            var localVarResponse = await AsynchronousClient.PutAsync<TagSingle>("/v1/tags/{tag}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
            ValidateException("UpdateTag", localVarResponse);
            return localVarResponse;
        }
    }
}
