/*
 * Firefly III API v2.0.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-09-01T03:14:46+00:00 
 *
 * The version of the OpenAPI document: 2.0.6
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// TransactionSplit
    /// </summary>
    [DataContract(Name = "TransactionSplit")]
    public partial class TransactionSplit : IEquatable<TransactionSplit>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TransactionTypeProperty Type { get; set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name = "source_type", EmitDefaultValue = false)]
        public AccountTypeProperty? SourceType { get; set; }

        /// <summary>
        /// Gets or Sets DestinationType
        /// </summary>
        [DataMember(Name = "destination_type", EmitDefaultValue = false)]
        public AccountTypeProperty? DestinationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSplit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplit" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="date">Date of the transaction (required).</param>
        /// <param name="order">Order of this entry in the list of transactions..</param>
        /// <param name="currencyId">Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code..</param>
        /// <param name="currencyCode">Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id..</param>
        /// <param name="foreignCurrencyId">Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount..</param>
        /// <param name="foreignCurrencyCode">Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount..</param>
        /// <param name="amount">Amount of the transaction. (required).</param>
        /// <param name="foreignAmount">The amount in a foreign currency..</param>
        /// <param name="description">Description of the transaction. (required).</param>
        /// <param name="sourceId">ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. (required).</param>
        /// <param name="sourceName">Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name..</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="destinationId">ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account. (required).</param>
        /// <param name="destinationName">Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough..</param>
        /// <param name="destinationType">destinationType.</param>
        /// <param name="budgetId">The budget ID for this transaction..</param>
        /// <param name="categoryId">The category ID for this transaction..</param>
        /// <param name="categoryName">The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name..</param>
        /// <param name="billId">Optional. Use either this or the bill_name.</param>
        /// <param name="billName">Optional. Use either this or the bill_id.</param>
        /// <param name="reconciled">If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user..</param>
        /// <param name="notes">notes.</param>
        /// <param name="tags">Array of tags..</param>
        /// <param name="internalReference">Reference to internal reference of other systems..</param>
        /// <param name="externalId">Reference to external ID in other systems..</param>
        /// <param name="externalUrl">External, custom URL for this transaction..</param>
        /// <param name="bunqPaymentId">Internal ID of bunq transaction. DEPRECATED.</param>
        /// <param name="sepaCc">SEPA Clearing Code.</param>
        /// <param name="sepaCtOp">SEPA Opposing Account Identifier.</param>
        /// <param name="sepaCtId">SEPA end-to-end Identifier.</param>
        /// <param name="sepaDb">SEPA mandate identifier.</param>
        /// <param name="sepaCountry">SEPA Country.</param>
        /// <param name="sepaEp">SEPA External Purpose indicator.</param>
        /// <param name="sepaCi">SEPA Creditor Identifier.</param>
        /// <param name="sepaBatchId">SEPA Batch ID.</param>
        /// <param name="interestDate">interestDate.</param>
        /// <param name="bookDate">bookDate.</param>
        /// <param name="processDate">processDate.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="paymentDate">paymentDate.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="latitude">Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map..</param>
        /// <param name="longitude">Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map..</param>
        /// <param name="zoomLevel">Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels..</param>
        /// <param name="hasAttachments">If the transaction has attachments..</param>
        public TransactionSplit(TransactionTypeProperty type = default(TransactionTypeProperty), DateTime date = default(DateTime), int? order = default(int?), string currencyId = default(string), string currencyCode = default(string), string foreignCurrencyId = default(string), string foreignCurrencyCode = default(string), string amount = default(string), string foreignAmount = default(string), string description = default(string), string sourceId = default(string), string sourceName = default(string), AccountTypeProperty? sourceType = default(AccountTypeProperty?), string destinationId = default(string), string destinationName = default(string), AccountTypeProperty? destinationType = default(AccountTypeProperty?), string budgetId = default(string), string categoryId = default(string), string categoryName = default(string), string billId = default(string), string billName = default(string), bool reconciled = default(bool), string notes = default(string), List<string> tags = default(List<string>), string internalReference = default(string), string externalId = default(string), string externalUrl = default(string), string bunqPaymentId = default(string), string sepaCc = default(string), string sepaCtOp = default(string), string sepaCtId = default(string), string sepaDb = default(string), string sepaCountry = default(string), string sepaEp = default(string), string sepaCi = default(string), string sepaBatchId = default(string), DateTime? interestDate = default(DateTime?), DateTime? bookDate = default(DateTime?), DateTime? processDate = default(DateTime?), DateTime? dueDate = default(DateTime?), DateTime? paymentDate = default(DateTime?), DateTime? invoiceDate = default(DateTime?), double? latitude = default(double?), double? longitude = default(double?), int? zoomLevel = default(int?), bool hasAttachments = default(bool))
        {
            this.Type = type;
            this.Date = date;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for TransactionSplit and cannot be null");
            }
            this.Amount = amount;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TransactionSplit and cannot be null");
            }
            this.Description = description;
            // to ensure "sourceId" is required (not null)
            if (sourceId == null)
            {
                throw new ArgumentNullException("sourceId is a required property for TransactionSplit and cannot be null");
            }
            this.SourceId = sourceId;
            // to ensure "destinationId" is required (not null)
            if (destinationId == null)
            {
                throw new ArgumentNullException("destinationId is a required property for TransactionSplit and cannot be null");
            }
            this.DestinationId = destinationId;
            this.Order = order;
            this.CurrencyId = currencyId;
            this.CurrencyCode = currencyCode;
            this.ForeignCurrencyId = foreignCurrencyId;
            this.ForeignCurrencyCode = foreignCurrencyCode;
            this.ForeignAmount = foreignAmount;
            this.SourceName = sourceName;
            this.SourceType = sourceType;
            this.DestinationName = destinationName;
            this.DestinationType = destinationType;
            this.BudgetId = budgetId;
            this.CategoryId = categoryId;
            this.CategoryName = categoryName;
            this.BillId = billId;
            this.BillName = billName;
            this.Reconciled = reconciled;
            this.Notes = notes;
            this.Tags = tags;
            this.InternalReference = internalReference;
            this.ExternalId = externalId;
            this.ExternalUrl = externalUrl;
            this.BunqPaymentId = bunqPaymentId;
            this.SepaCc = sepaCc;
            this.SepaCtOp = sepaCtOp;
            this.SepaCtId = sepaCtId;
            this.SepaDb = sepaDb;
            this.SepaCountry = sepaCountry;
            this.SepaEp = sepaEp;
            this.SepaCi = sepaCi;
            this.SepaBatchId = sepaBatchId;
            this.InterestDate = interestDate;
            this.BookDate = bookDate;
            this.ProcessDate = processDate;
            this.DueDate = dueDate;
            this.PaymentDate = paymentDate;
            this.InvoiceDate = invoiceDate;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.ZoomLevel = zoomLevel;
            this.HasAttachments = hasAttachments;
        }

        /// <summary>
        /// User ID
        /// </summary>
        /// <value>User ID</value>
        /// <example>3</example>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public string User { get; private set; }

        /// <summary>
        /// Returns false as User should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUser()
        {
            return false;
        }
        /// <summary>
        /// ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. 
        /// </summary>
        /// <value>ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. </value>
        /// <example>10421</example>
        [DataMember(Name = "transaction_journal_id", EmitDefaultValue = false)]
        public string TransactionJournalId { get; private set; }

        /// <summary>
        /// Returns false as TransactionJournalId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransactionJournalId()
        {
            return false;
        }
        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Order of this entry in the list of transactions.
        /// </summary>
        /// <value>Order of this entry in the list of transactions.</value>
        /// <example>0</example>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public int? Order { get; set; }

        /// <summary>
        /// Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code.
        /// </summary>
        /// <value>Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_code.</value>
        /// <example>12</example>
        [DataMember(Name = "currency_id", EmitDefaultValue = true)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id.
        /// </summary>
        /// <value>Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. Can be used instead of currency_id.</value>
        /// <example>EUR</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /// <example>$</example>
        [DataMember(Name = "currency_symbol", EmitDefaultValue = false)]
        public string CurrencySymbol { get; private set; }

        /// <summary>
        /// Returns false as CurrencySymbol should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencySymbol()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        /// <example>Euro</example>
        [DataMember(Name = "currency_name", EmitDefaultValue = false)]
        public string CurrencyName { get; private set; }

        /// <summary>
        /// Returns false as CurrencyName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyName()
        {
            return false;
        }
        /// <summary>
        /// Number of decimals used in this currency.
        /// </summary>
        /// <value>Number of decimals used in this currency.</value>
        /// <example>2</example>
        [DataMember(Name = "currency_decimal_places", EmitDefaultValue = false)]
        public int CurrencyDecimalPlaces { get; private set; }

        /// <summary>
        /// Returns false as CurrencyDecimalPlaces should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrencyDecimalPlaces()
        {
            return false;
        }
        /// <summary>
        /// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
        /// </summary>
        /// <value>Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.</value>
        /// <example>17</example>
        [DataMember(Name = "foreign_currency_id", EmitDefaultValue = true)]
        public string ForeignCurrencyId { get; set; }

        /// <summary>
        /// Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
        /// </summary>
        /// <value>Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.</value>
        /// <example>USD</example>
        [DataMember(Name = "foreign_currency_code", EmitDefaultValue = true)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ForeignCurrencySymbol
        /// </summary>
        /// <example>$</example>
        [DataMember(Name = "foreign_currency_symbol", EmitDefaultValue = true)]
        public string ForeignCurrencySymbol { get; private set; }

        /// <summary>
        /// Returns false as ForeignCurrencySymbol should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForeignCurrencySymbol()
        {
            return false;
        }
        /// <summary>
        /// Number of decimals in the currency
        /// </summary>
        /// <value>Number of decimals in the currency</value>
        /// <example>2</example>
        [DataMember(Name = "foreign_currency_decimal_places", EmitDefaultValue = true)]
        public int? ForeignCurrencyDecimalPlaces { get; private set; }

        /// <summary>
        /// Returns false as ForeignCurrencyDecimalPlaces should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForeignCurrencyDecimalPlaces()
        {
            return false;
        }
        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /// <example>123.45</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// The amount in a foreign currency.
        /// </summary>
        /// <value>The amount in a foreign currency.</value>
        /// <example>123.45</example>
        [DataMember(Name = "foreign_amount", EmitDefaultValue = true)]
        public string ForeignAmount { get; set; }

        /// <summary>
        /// Description of the transaction.
        /// </summary>
        /// <value>Description of the transaction.</value>
        /// <example>Vegetables</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
        /// </summary>
        /// <value>ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</value>
        /// <example>2</example>
        [DataMember(Name = "source_id", IsRequired = true, EmitDefaultValue = true)]
        public string SourceId { get; set; }

        /// <summary>
        /// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
        /// </summary>
        /// <value>Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</value>
        /// <example>Checking account</example>
        [DataMember(Name = "source_name", EmitDefaultValue = true)]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or Sets SourceIban
        /// </summary>
        /// <example>NL02ABNA0123456789</example>
        [DataMember(Name = "source_iban", EmitDefaultValue = true)]
        public string SourceIban { get; private set; }

        /// <summary>
        /// Returns false as SourceIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceIban()
        {
            return false;
        }
        /// <summary>
        /// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
        /// </summary>
        /// <value>ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</value>
        /// <example>2</example>
        [DataMember(Name = "destination_id", IsRequired = true, EmitDefaultValue = true)]
        public string DestinationId { get; set; }

        /// <summary>
        /// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
        /// </summary>
        /// <value>Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</value>
        /// <example>Buy and Large</example>
        [DataMember(Name = "destination_name", EmitDefaultValue = true)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or Sets DestinationIban
        /// </summary>
        /// <example>NL02ABNA0123456789</example>
        [DataMember(Name = "destination_iban", EmitDefaultValue = true)]
        public string DestinationIban { get; private set; }

        /// <summary>
        /// Returns false as DestinationIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDestinationIban()
        {
            return false;
        }
        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /// <example>4</example>
        [DataMember(Name = "budget_id", EmitDefaultValue = true)]
        public string BudgetId { get; set; }

        /// <summary>
        /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
        /// </summary>
        /// <value>The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</value>
        /// <example>Groceries</example>
        [DataMember(Name = "budget_name", EmitDefaultValue = true)]
        public string BudgetName { get; private set; }

        /// <summary>
        /// Returns false as BudgetName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBudgetName()
        {
            return false;
        }
        /// <summary>
        /// The category ID for this transaction.
        /// </summary>
        /// <value>The category ID for this transaction.</value>
        /// <example>43</example>
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId { get; set; }

        /// <summary>
        /// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
        /// </summary>
        /// <value>The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</value>
        /// <example>Groceries</example>
        [DataMember(Name = "category_name", EmitDefaultValue = true)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_name
        /// </summary>
        /// <value>Optional. Use either this or the bill_name</value>
        /// <example>111</example>
        [DataMember(Name = "bill_id", EmitDefaultValue = true)]
        public string BillId { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_id
        /// </summary>
        /// <value>Optional. Use either this or the bill_id</value>
        /// <example>Monthly rent</example>
        [DataMember(Name = "bill_name", EmitDefaultValue = true)]
        public string BillName { get; set; }

        /// <summary>
        /// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
        /// </summary>
        /// <value>If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</value>
        /// <example>false</example>
        [DataMember(Name = "reconciled", EmitDefaultValue = true)]
        public bool Reconciled { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /// <example>Some example notes</example>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes { get; set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Reference to internal reference of other systems.
        /// </summary>
        /// <value>Reference to internal reference of other systems.</value>
        [DataMember(Name = "internal_reference", EmitDefaultValue = true)]
        public string InternalReference { get; set; }

        /// <summary>
        /// Reference to external ID in other systems.
        /// </summary>
        /// <value>Reference to external ID in other systems.</value>
        [DataMember(Name = "external_id", EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// External, custom URL for this transaction.
        /// </summary>
        /// <value>External, custom URL for this transaction.</value>
        [DataMember(Name = "external_url", EmitDefaultValue = true)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// System generated identifier for original creator of transaction.
        /// </summary>
        /// <value>System generated identifier for original creator of transaction.</value>
        [DataMember(Name = "original_source", EmitDefaultValue = true)]
        public string OriginalSource { get; private set; }

        /// <summary>
        /// Returns false as OriginalSource should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalSource()
        {
            return false;
        }
        /// <summary>
        /// Reference to recurrence that made the transaction.
        /// </summary>
        /// <value>Reference to recurrence that made the transaction.</value>
        [DataMember(Name = "recurrence_id", EmitDefaultValue = true)]
        public int? RecurrenceId { get; private set; }

        /// <summary>
        /// Returns false as RecurrenceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecurrenceId()
        {
            return false;
        }
        /// <summary>
        /// Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.
        /// </summary>
        /// <value>Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.</value>
        /// <example>0</example>
        [DataMember(Name = "recurrence_total", EmitDefaultValue = true)]
        public int? RecurrenceTotal { get; private set; }

        /// <summary>
        /// Returns false as RecurrenceTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecurrenceTotal()
        {
            return false;
        }
        /// <summary>
        /// The # of the current transaction created under this recurrence.
        /// </summary>
        /// <value>The # of the current transaction created under this recurrence.</value>
        /// <example>12</example>
        [DataMember(Name = "recurrence_count", EmitDefaultValue = true)]
        public int? RecurrenceCount { get; private set; }

        /// <summary>
        /// Returns false as RecurrenceCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecurrenceCount()
        {
            return false;
        }
        /// <summary>
        /// Internal ID of bunq transaction. DEPRECATED
        /// </summary>
        /// <value>Internal ID of bunq transaction. DEPRECATED</value>
        [DataMember(Name = "bunq_payment_id", EmitDefaultValue = true)]
        public string BunqPaymentId { get; set; }

        /// <summary>
        /// Hash value of original import transaction (for duplicate detection).
        /// </summary>
        /// <value>Hash value of original import transaction (for duplicate detection).</value>
        [DataMember(Name = "import_hash_v2", EmitDefaultValue = true)]
        public string ImportHashV2 { get; private set; }

        /// <summary>
        /// Returns false as ImportHashV2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImportHashV2()
        {
            return false;
        }
        /// <summary>
        /// SEPA Clearing Code
        /// </summary>
        /// <value>SEPA Clearing Code</value>
        [DataMember(Name = "sepa_cc", EmitDefaultValue = true)]
        public string SepaCc { get; set; }

        /// <summary>
        /// SEPA Opposing Account Identifier
        /// </summary>
        /// <value>SEPA Opposing Account Identifier</value>
        [DataMember(Name = "sepa_ct_op", EmitDefaultValue = true)]
        public string SepaCtOp { get; set; }

        /// <summary>
        /// SEPA end-to-end Identifier
        /// </summary>
        /// <value>SEPA end-to-end Identifier</value>
        [DataMember(Name = "sepa_ct_id", EmitDefaultValue = true)]
        public string SepaCtId { get; set; }

        /// <summary>
        /// SEPA mandate identifier
        /// </summary>
        /// <value>SEPA mandate identifier</value>
        [DataMember(Name = "sepa_db", EmitDefaultValue = true)]
        public string SepaDb { get; set; }

        /// <summary>
        /// SEPA Country
        /// </summary>
        /// <value>SEPA Country</value>
        [DataMember(Name = "sepa_country", EmitDefaultValue = true)]
        public string SepaCountry { get; set; }

        /// <summary>
        /// SEPA External Purpose indicator
        /// </summary>
        /// <value>SEPA External Purpose indicator</value>
        [DataMember(Name = "sepa_ep", EmitDefaultValue = true)]
        public string SepaEp { get; set; }

        /// <summary>
        /// SEPA Creditor Identifier
        /// </summary>
        /// <value>SEPA Creditor Identifier</value>
        [DataMember(Name = "sepa_ci", EmitDefaultValue = true)]
        public string SepaCi { get; set; }

        /// <summary>
        /// SEPA Batch ID
        /// </summary>
        /// <value>SEPA Batch ID</value>
        [DataMember(Name = "sepa_batch_id", EmitDefaultValue = true)]
        public string SepaBatchId { get; set; }

        /// <summary>
        /// Gets or Sets InterestDate
        /// </summary>
        [DataMember(Name = "interest_date", EmitDefaultValue = true)]
        public DateTime? InterestDate { get; set; }

        /// <summary>
        /// Gets or Sets BookDate
        /// </summary>
        [DataMember(Name = "book_date", EmitDefaultValue = true)]
        public DateTime? BookDate { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [DataMember(Name = "process_date", EmitDefaultValue = true)]
        public DateTime? ProcessDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name = "payment_date", EmitDefaultValue = true)]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name = "invoice_date", EmitDefaultValue = true)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</value>
        /// <example>51.983333</example>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.
        /// </summary>
        /// <value>Latitude of the transaction&#39;s location, if applicable. Can be used to draw a map.</value>
        /// <example>5.916667</example>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
        /// </summary>
        /// <value>Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.</value>
        /// <example>6</example>
        [DataMember(Name = "zoom_level", EmitDefaultValue = true)]
        public int? ZoomLevel { get; set; }

        /// <summary>
        /// If the transaction has attachments.
        /// </summary>
        /// <value>If the transaction has attachments.</value>
        /// <example>false</example>
        [DataMember(Name = "has_attachments", EmitDefaultValue = true)]
        public bool HasAttachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSplit {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TransactionJournalId: ").Append(TransactionJournalId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  ForeignCurrencySymbol: ").Append(ForeignCurrencySymbol).Append("\n");
            sb.Append("  ForeignCurrencyDecimalPlaces: ").Append(ForeignCurrencyDecimalPlaces).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceIban: ").Append(SourceIban).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  DestinationIban: ").Append(DestinationIban).Append("\n");
            sb.Append("  DestinationType: ").Append(DestinationType).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillName: ").Append(BillName).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  OriginalSource: ").Append(OriginalSource).Append("\n");
            sb.Append("  RecurrenceId: ").Append(RecurrenceId).Append("\n");
            sb.Append("  RecurrenceTotal: ").Append(RecurrenceTotal).Append("\n");
            sb.Append("  RecurrenceCount: ").Append(RecurrenceCount).Append("\n");
            sb.Append("  BunqPaymentId: ").Append(BunqPaymentId).Append("\n");
            sb.Append("  ImportHashV2: ").Append(ImportHashV2).Append("\n");
            sb.Append("  SepaCc: ").Append(SepaCc).Append("\n");
            sb.Append("  SepaCtOp: ").Append(SepaCtOp).Append("\n");
            sb.Append("  SepaCtId: ").Append(SepaCtId).Append("\n");
            sb.Append("  SepaDb: ").Append(SepaDb).Append("\n");
            sb.Append("  SepaCountry: ").Append(SepaCountry).Append("\n");
            sb.Append("  SepaEp: ").Append(SepaEp).Append("\n");
            sb.Append("  SepaCi: ").Append(SepaCi).Append("\n");
            sb.Append("  SepaBatchId: ").Append(SepaBatchId).Append("\n");
            sb.Append("  InterestDate: ").Append(InterestDate).Append("\n");
            sb.Append("  BookDate: ").Append(BookDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  ZoomLevel: ").Append(ZoomLevel).Append("\n");
            sb.Append("  HasAttachments: ").Append(HasAttachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSplit);
        }

        /// <summary>
        /// Returns true if TransactionSplit instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSplit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSplit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.TransactionJournalId == input.TransactionJournalId ||
                    (this.TransactionJournalId != null &&
                    this.TransactionJournalId.Equals(input.TransactionJournalId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.CurrencyDecimalPlaces == input.CurrencyDecimalPlaces ||
                    this.CurrencyDecimalPlaces.Equals(input.CurrencyDecimalPlaces)
                ) && 
                (
                    this.ForeignCurrencyId == input.ForeignCurrencyId ||
                    (this.ForeignCurrencyId != null &&
                    this.ForeignCurrencyId.Equals(input.ForeignCurrencyId))
                ) && 
                (
                    this.ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (this.ForeignCurrencyCode != null &&
                    this.ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) && 
                (
                    this.ForeignCurrencySymbol == input.ForeignCurrencySymbol ||
                    (this.ForeignCurrencySymbol != null &&
                    this.ForeignCurrencySymbol.Equals(input.ForeignCurrencySymbol))
                ) && 
                (
                    this.ForeignCurrencyDecimalPlaces == input.ForeignCurrencyDecimalPlaces ||
                    (this.ForeignCurrencyDecimalPlaces != null &&
                    this.ForeignCurrencyDecimalPlaces.Equals(input.ForeignCurrencyDecimalPlaces))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ForeignAmount == input.ForeignAmount ||
                    (this.ForeignAmount != null &&
                    this.ForeignAmount.Equals(input.ForeignAmount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) && 
                (
                    this.SourceIban == input.SourceIban ||
                    (this.SourceIban != null &&
                    this.SourceIban.Equals(input.SourceIban))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    this.SourceType.Equals(input.SourceType)
                ) && 
                (
                    this.DestinationId == input.DestinationId ||
                    (this.DestinationId != null &&
                    this.DestinationId.Equals(input.DestinationId))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.DestinationIban == input.DestinationIban ||
                    (this.DestinationIban != null &&
                    this.DestinationIban.Equals(input.DestinationIban))
                ) && 
                (
                    this.DestinationType == input.DestinationType ||
                    this.DestinationType.Equals(input.DestinationType)
                ) && 
                (
                    this.BudgetId == input.BudgetId ||
                    (this.BudgetId != null &&
                    this.BudgetId.Equals(input.BudgetId))
                ) && 
                (
                    this.BudgetName == input.BudgetName ||
                    (this.BudgetName != null &&
                    this.BudgetName.Equals(input.BudgetName))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.BillId == input.BillId ||
                    (this.BillId != null &&
                    this.BillId.Equals(input.BillId))
                ) && 
                (
                    this.BillName == input.BillName ||
                    (this.BillName != null &&
                    this.BillName.Equals(input.BillName))
                ) && 
                (
                    this.Reconciled == input.Reconciled ||
                    this.Reconciled.Equals(input.Reconciled)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.InternalReference == input.InternalReference ||
                    (this.InternalReference != null &&
                    this.InternalReference.Equals(input.InternalReference))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ExternalUrl == input.ExternalUrl ||
                    (this.ExternalUrl != null &&
                    this.ExternalUrl.Equals(input.ExternalUrl))
                ) && 
                (
                    this.OriginalSource == input.OriginalSource ||
                    (this.OriginalSource != null &&
                    this.OriginalSource.Equals(input.OriginalSource))
                ) && 
                (
                    this.RecurrenceId == input.RecurrenceId ||
                    (this.RecurrenceId != null &&
                    this.RecurrenceId.Equals(input.RecurrenceId))
                ) && 
                (
                    this.RecurrenceTotal == input.RecurrenceTotal ||
                    (this.RecurrenceTotal != null &&
                    this.RecurrenceTotal.Equals(input.RecurrenceTotal))
                ) && 
                (
                    this.RecurrenceCount == input.RecurrenceCount ||
                    (this.RecurrenceCount != null &&
                    this.RecurrenceCount.Equals(input.RecurrenceCount))
                ) && 
                (
                    this.BunqPaymentId == input.BunqPaymentId ||
                    (this.BunqPaymentId != null &&
                    this.BunqPaymentId.Equals(input.BunqPaymentId))
                ) && 
                (
                    this.ImportHashV2 == input.ImportHashV2 ||
                    (this.ImportHashV2 != null &&
                    this.ImportHashV2.Equals(input.ImportHashV2))
                ) && 
                (
                    this.SepaCc == input.SepaCc ||
                    (this.SepaCc != null &&
                    this.SepaCc.Equals(input.SepaCc))
                ) && 
                (
                    this.SepaCtOp == input.SepaCtOp ||
                    (this.SepaCtOp != null &&
                    this.SepaCtOp.Equals(input.SepaCtOp))
                ) && 
                (
                    this.SepaCtId == input.SepaCtId ||
                    (this.SepaCtId != null &&
                    this.SepaCtId.Equals(input.SepaCtId))
                ) && 
                (
                    this.SepaDb == input.SepaDb ||
                    (this.SepaDb != null &&
                    this.SepaDb.Equals(input.SepaDb))
                ) && 
                (
                    this.SepaCountry == input.SepaCountry ||
                    (this.SepaCountry != null &&
                    this.SepaCountry.Equals(input.SepaCountry))
                ) && 
                (
                    this.SepaEp == input.SepaEp ||
                    (this.SepaEp != null &&
                    this.SepaEp.Equals(input.SepaEp))
                ) && 
                (
                    this.SepaCi == input.SepaCi ||
                    (this.SepaCi != null &&
                    this.SepaCi.Equals(input.SepaCi))
                ) && 
                (
                    this.SepaBatchId == input.SepaBatchId ||
                    (this.SepaBatchId != null &&
                    this.SepaBatchId.Equals(input.SepaBatchId))
                ) && 
                (
                    this.InterestDate == input.InterestDate ||
                    (this.InterestDate != null &&
                    this.InterestDate.Equals(input.InterestDate))
                ) && 
                (
                    this.BookDate == input.BookDate ||
                    (this.BookDate != null &&
                    this.BookDate.Equals(input.BookDate))
                ) && 
                (
                    this.ProcessDate == input.ProcessDate ||
                    (this.ProcessDate != null &&
                    this.ProcessDate.Equals(input.ProcessDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.ZoomLevel == input.ZoomLevel ||
                    (this.ZoomLevel != null &&
                    this.ZoomLevel.Equals(input.ZoomLevel))
                ) && 
                (
                    this.HasAttachments == input.HasAttachments ||
                    this.HasAttachments.Equals(input.HasAttachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.TransactionJournalId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionJournalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                if (this.CurrencyName != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyDecimalPlaces.GetHashCode();
                if (this.ForeignCurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignCurrencyId.GetHashCode();
                }
                if (this.ForeignCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignCurrencyCode.GetHashCode();
                }
                if (this.ForeignCurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignCurrencySymbol.GetHashCode();
                }
                if (this.ForeignCurrencyDecimalPlaces != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignCurrencyDecimalPlaces.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.ForeignAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ForeignAmount.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.SourceName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceName.GetHashCode();
                }
                if (this.SourceIban != null)
                {
                    hashCode = (hashCode * 59) + this.SourceIban.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                if (this.DestinationId != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationId.GetHashCode();
                }
                if (this.DestinationName != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationName.GetHashCode();
                }
                if (this.DestinationIban != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationIban.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DestinationType.GetHashCode();
                if (this.BudgetId != null)
                {
                    hashCode = (hashCode * 59) + this.BudgetId.GetHashCode();
                }
                if (this.BudgetName != null)
                {
                    hashCode = (hashCode * 59) + this.BudgetName.GetHashCode();
                }
                if (this.CategoryId != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryId.GetHashCode();
                }
                if (this.CategoryName != null)
                {
                    hashCode = (hashCode * 59) + this.CategoryName.GetHashCode();
                }
                if (this.BillId != null)
                {
                    hashCode = (hashCode * 59) + this.BillId.GetHashCode();
                }
                if (this.BillName != null)
                {
                    hashCode = (hashCode * 59) + this.BillName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reconciled.GetHashCode();
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.InternalReference != null)
                {
                    hashCode = (hashCode * 59) + this.InternalReference.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.ExternalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalUrl.GetHashCode();
                }
                if (this.OriginalSource != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalSource.GetHashCode();
                }
                if (this.RecurrenceId != null)
                {
                    hashCode = (hashCode * 59) + this.RecurrenceId.GetHashCode();
                }
                if (this.RecurrenceTotal != null)
                {
                    hashCode = (hashCode * 59) + this.RecurrenceTotal.GetHashCode();
                }
                if (this.RecurrenceCount != null)
                {
                    hashCode = (hashCode * 59) + this.RecurrenceCount.GetHashCode();
                }
                if (this.BunqPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.BunqPaymentId.GetHashCode();
                }
                if (this.ImportHashV2 != null)
                {
                    hashCode = (hashCode * 59) + this.ImportHashV2.GetHashCode();
                }
                if (this.SepaCc != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCc.GetHashCode();
                }
                if (this.SepaCtOp != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCtOp.GetHashCode();
                }
                if (this.SepaCtId != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCtId.GetHashCode();
                }
                if (this.SepaDb != null)
                {
                    hashCode = (hashCode * 59) + this.SepaDb.GetHashCode();
                }
                if (this.SepaCountry != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCountry.GetHashCode();
                }
                if (this.SepaEp != null)
                {
                    hashCode = (hashCode * 59) + this.SepaEp.GetHashCode();
                }
                if (this.SepaCi != null)
                {
                    hashCode = (hashCode * 59) + this.SepaCi.GetHashCode();
                }
                if (this.SepaBatchId != null)
                {
                    hashCode = (hashCode * 59) + this.SepaBatchId.GetHashCode();
                }
                if (this.InterestDate != null)
                {
                    hashCode = (hashCode * 59) + this.InterestDate.GetHashCode();
                }
                if (this.BookDate != null)
                {
                    hashCode = (hashCode * 59) + this.BookDate.GetHashCode();
                }
                if (this.ProcessDate != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessDate.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                if (this.InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.ZoomLevel != null)
                {
                    hashCode = (hashCode * 59) + this.ZoomLevel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasAttachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
