/*
 * Firefly III API v2.0.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-05-17T04:54:43+00:00 
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// LinkType
    /// </summary>
    [DataContract(Name = "LinkType")]
    public partial class LinkType : IEquatable<LinkType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkType" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="inward">inward (required).</param>
        /// <param name="outward">outward (required).</param>
        public LinkType(string name = default(string), string inward = default(string), string outward = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for LinkType and cannot be null");
            }
            Name = name;
            // to ensure "inward" is required (not null)
            if (inward == null)
            {
                throw new ArgumentNullException("inward is a required property for LinkType and cannot be null");
            }
            Inward = inward;
            // to ensure "outward" is required (not null)
            if (outward == null)
            {
                throw new ArgumentNullException("outward is a required property for LinkType and cannot be null");
            }
            Outward = outward;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>Paid</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Inward
        /// </summary>
        /// <example>is (partially) paid for by</example>
        [DataMember(Name = "inward", IsRequired = true, EmitDefaultValue = true)]
        public string Inward { get; set; }

        /// <summary>
        /// Gets or Sets Outward
        /// </summary>
        /// <example>(partially) pays for</example>
        [DataMember(Name = "outward", IsRequired = true, EmitDefaultValue = true)]
        public string Outward { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "editable", EmitDefaultValue = true)]
        public bool Editable { get; private set; }

        /// <summary>
        /// Returns false as Editable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEditable()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inward: ").Append(Inward).Append("\n");
            sb.Append("  Outward: ").Append(Outward).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinkType);
        }

        /// <summary>
        /// Returns true if LinkType instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
					Name.Equals(input.Name)
                ) && 
                (
                    Inward == input.Inward ||
					Inward.Equals(input.Inward)
                ) && 
                (
                    Outward == input.Outward ||
					Outward.Equals(input.Outward)
                ) && 
                (
                    Editable == input.Editable ||
                    Editable.Equals(input.Editable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
				hashCode = (hashCode * 59) + Name.GetHashCode();
				hashCode = (hashCode * 59) + Inward.GetHashCode();
				hashCode = (hashCode * 59) + Outward.GetHashCode();
                hashCode = (hashCode * 59) + Editable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
