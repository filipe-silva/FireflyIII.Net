/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// LinkTypeUpdate
    /// </summary>
    [DataContract(Name = "LinkTypeUpdate")]
    public partial class LinkTypeUpdate : IEquatable<LinkTypeUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkTypeUpdate" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="inward">inward.</param>
        /// <param name="outward">outward.</param>
        public LinkTypeUpdate(string name = default(string), string inward = default(string), string outward = default(string))
        {
            Name = name;
            Inward = inward;
            Outward = outward;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>Paid</example>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Inward
        /// </summary>
        /// <example>is (partially) paid for by</example>
        [DataMember(Name = "inward", EmitDefaultValue = true)]
        public string Inward { get; set; }

        /// <summary>
        /// Gets or Sets Outward
        /// </summary>
        /// <example>(partially) pays for</example>
        [DataMember(Name = "outward", EmitDefaultValue = true)]
        public string Outward { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkTypeUpdate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inward: ").Append(Inward).Append("\n");
            sb.Append("  Outward: ").Append(Outward).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinkTypeUpdate);
        }

        /// <summary>
        /// Returns true if LinkTypeUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkTypeUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkTypeUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
					Name.Equals(input.Name)
                ) && 
                (
                    Inward == input.Inward ||
					Inward.Equals(input.Inward)
                ) && 
                (
                    Outward == input.Outward ||
					Outward.Equals(input.Outward)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
				hashCode = (hashCode * 59) + Name.GetHashCode();
				hashCode = (hashCode * 59) + Inward.GetHashCode();
				hashCode = (hashCode * 59) + Outward.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
