/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// TransactionSplitStore
    /// </summary>
    [DataContract(Name = "TransactionSplitStore")]
    public partial class TransactionSplitStore : IEquatable<TransactionSplitStore>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TransactionTypeProperty Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplitStore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionSplitStore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSplitStore" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="date">Date of the transaction (required).</param>
        /// <param name="amount">Amount of the transaction. (required).</param>
        /// <param name="description">Description of the transaction. (required).</param>
        /// <param name="order">Order of this entry in the list of transactions..</param>
        /// <param name="currencyId">Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account..</param>
        /// <param name="currencyCode">Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account..</param>
        /// <param name="foreignAmount">The amount in a foreign currency..</param>
        /// <param name="foreignCurrencyId">Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount..</param>
        /// <param name="foreignCurrencyCode">Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount..</param>
        /// <param name="budgetId">The budget ID for this transaction..</param>
        /// <param name="categoryId">The category ID for this transaction..</param>
        /// <param name="categoryName">The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name..</param>
        /// <param name="sourceId">ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account..</param>
        /// <param name="sourceName">Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name..</param>
        /// <param name="destinationId">ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account..</param>
        /// <param name="destinationName">Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough..</param>
        /// <param name="reconciled">If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user..</param>
        /// <param name="piggyBankId">Optional. Use either this or the piggy_bank_name.</param>
        /// <param name="piggyBankName">Optional. Use either this or the piggy_bank_id.</param>
        /// <param name="billId">Optional. Use either this or the bill_name.</param>
        /// <param name="billName">Optional. Use either this or the bill_id.</param>
        /// <param name="tags">Array of tags..</param>
        /// <param name="notes">notes.</param>
        /// <param name="internalReference">Reference to internal reference of other systems..</param>
        /// <param name="externalId">Reference to external ID in other systems..</param>
        /// <param name="externalUrl">External, custom URL for this transaction..</param>
        /// <param name="bunqPaymentId">Internal ID of bunq transaction. Field is no longer used but still works..</param>
        /// <param name="sepaCc">SEPA Clearing Code.</param>
        /// <param name="sepaCtOp">SEPA Opposing Account Identifier.</param>
        /// <param name="sepaCtId">SEPA end-to-end Identifier.</param>
        /// <param name="sepaDb">SEPA mandate identifier.</param>
        /// <param name="sepaCountry">SEPA Country.</param>
        /// <param name="sepaEp">SEPA External Purpose indicator.</param>
        /// <param name="sepaCi">SEPA Creditor Identifier.</param>
        /// <param name="sepaBatchId">SEPA Batch ID.</param>
        /// <param name="interestDate">interestDate.</param>
        /// <param name="bookDate">bookDate.</param>
        /// <param name="processDate">processDate.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="paymentDate">paymentDate.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        public TransactionSplitStore(TransactionTypeProperty type = default(TransactionTypeProperty), DateTime date = default(DateTime), string amount = default(string), string description = default(string), int? order = default(int?), string currencyId = default(string), string currencyCode = default(string), string foreignAmount = default(string), string foreignCurrencyId = default(string), string foreignCurrencyCode = default(string), string budgetId = default(string), string categoryId = default(string), string categoryName = default(string), string sourceId = default(string), string sourceName = default(string), string destinationId = default(string), string destinationName = default(string), bool reconciled = default(bool), int piggyBankId = default(int), string piggyBankName = default(string), string billId = default(string), string billName = default(string), List<string> tags = default(List<string>), string notes = default(string), string internalReference = default(string), string externalId = default(string), string externalUrl = default(string), string bunqPaymentId = default(string), string sepaCc = default(string), string sepaCtOp = default(string), string sepaCtId = default(string), string sepaDb = default(string), string sepaCountry = default(string), string sepaEp = default(string), string sepaCi = default(string), string sepaBatchId = default(string), DateTime? interestDate = default(DateTime?), DateTime? bookDate = default(DateTime?), DateTime? processDate = default(DateTime?), DateTime? dueDate = default(DateTime?), DateTime? paymentDate = default(DateTime?), DateTime? invoiceDate = default(DateTime?))
        {
            Type = type;
            Date = date;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for TransactionSplitStore and cannot be null");
            }
            Amount = amount;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TransactionSplitStore and cannot be null");
            }
            Description = description;
            Order = order;
            CurrencyId = currencyId;
            CurrencyCode = currencyCode;
            ForeignAmount = foreignAmount;
            ForeignCurrencyId = foreignCurrencyId;
            ForeignCurrencyCode = foreignCurrencyCode;
            BudgetId = budgetId;
            CategoryId = categoryId;
            CategoryName = categoryName;
            SourceId = sourceId;
            SourceName = sourceName;
            DestinationId = destinationId;
            DestinationName = destinationName;
            Reconciled = reconciled;
            PiggyBankId = piggyBankId;
            PiggyBankName = piggyBankName;
            BillId = billId;
            BillName = billName;
            Tags = tags;
            Notes = notes;
            InternalReference = internalReference;
            ExternalId = externalId;
            ExternalUrl = externalUrl;
            BunqPaymentId = bunqPaymentId;
            SepaCc = sepaCc;
            SepaCtOp = sepaCtOp;
            SepaCtId = sepaCtId;
            SepaDb = sepaDb;
            SepaCountry = sepaCountry;
            SepaEp = sepaEp;
            SepaCi = sepaCi;
            SepaBatchId = sepaBatchId;
            InterestDate = interestDate;
            BookDate = bookDate;
            ProcessDate = processDate;
            DueDate = dueDate;
            PaymentDate = paymentDate;
            InvoiceDate = invoiceDate;
        }

        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Amount of the transaction.
        /// </summary>
        /// <value>Amount of the transaction.</value>
        /// <example>123.45</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Description of the transaction.
        /// </summary>
        /// <value>Description of the transaction.</value>
        /// <example>Vegetables</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Order of this entry in the list of transactions.
        /// </summary>
        /// <value>Order of this entry in the list of transactions.</value>
        /// <example>0</example>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int? Order { get; set; }

        /// <summary>
        /// Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account.
        /// </summary>
        /// <value>Currency ID. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account.</value>
        /// <example>12</example>
        [DataMember(Name = "currency_id", EmitDefaultValue = false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account.
        /// </summary>
        /// <value>Currency code. Default is the source account&#39;s currency, or the user&#39;s default currency. The value you submit may be overruled by the source or destination account.</value>
        /// <example>EUR</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The amount in a foreign currency.
        /// </summary>
        /// <value>The amount in a foreign currency.</value>
        /// <example>123.45</example>
        [DataMember(Name = "foreign_amount", EmitDefaultValue = false)]
        public string ForeignAmount { get; set; }

        /// <summary>
        /// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
        /// </summary>
        /// <value>Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.</value>
        /// <example>17</example>
        [DataMember(Name = "foreign_currency_id", EmitDefaultValue = false)]
        public string ForeignCurrencyId { get; set; }

        /// <summary>
        /// Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
        /// </summary>
        /// <value>Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.</value>
        /// <example>USD</example>
        [DataMember(Name = "foreign_currency_code", EmitDefaultValue = false)]
        public string ForeignCurrencyCode { get; set; }

        /// <summary>
        /// The budget ID for this transaction.
        /// </summary>
        /// <value>The budget ID for this transaction.</value>
        /// <example>4</example>
        [DataMember(Name = "budget_id", EmitDefaultValue = false)]
        public string BudgetId { get; set; }

        /// <summary>
        /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
        /// </summary>
        /// <value>The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.</value>
        /// <example>Groceries</example>
        [DataMember(Name = "budget_name", EmitDefaultValue = false)]
        public string BudgetName { get; private set; }

        /// <summary>
        /// Returns false as BudgetName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBudgetName()
        {
            return false;
        }
        /// <summary>
        /// The category ID for this transaction.
        /// </summary>
        /// <value>The category ID for this transaction.</value>
        /// <example>43</example>
        [DataMember(Name = "category_id", EmitDefaultValue = false)]
        public string CategoryId { get; set; }

        /// <summary>
        /// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
        /// </summary>
        /// <value>The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.</value>
        /// <example>Groceries</example>
        [DataMember(Name = "category_name", EmitDefaultValue = false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
        /// </summary>
        /// <value>ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.</value>
        /// <example>2</example>
        [DataMember(Name = "source_id", EmitDefaultValue = false)]
        public string SourceId { get; set; }

        /// <summary>
        /// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
        /// </summary>
        /// <value>Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.</value>
        /// <example>Checking account</example>
        [DataMember(Name = "source_name", EmitDefaultValue = false)]
        public string SourceName { get; set; }

        /// <summary>
        /// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
        /// </summary>
        /// <value>ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.</value>
        /// <example>2</example>
        [DataMember(Name = "destination_id", EmitDefaultValue = false)]
        public string DestinationId { get; set; }

        /// <summary>
        /// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
        /// </summary>
        /// <value>Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.</value>
        /// <example>Buy and Large</example>
        [DataMember(Name = "destination_name", EmitDefaultValue = false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
        /// </summary>
        /// <value>If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.</value>
        /// <example>false</example>
        [DataMember(Name = "reconciled", EmitDefaultValue = true)]
        public bool Reconciled { get; set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_name
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_name</value>
        [DataMember(Name = "piggy_bank_id", EmitDefaultValue = true)]
        public int PiggyBankId { get; set; }

        /// <summary>
        /// Optional. Use either this or the piggy_bank_id
        /// </summary>
        /// <value>Optional. Use either this or the piggy_bank_id</value>
        [DataMember(Name = "piggy_bank_name", EmitDefaultValue = true)]
        public string PiggyBankName { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_name
        /// </summary>
        /// <value>Optional. Use either this or the bill_name</value>
        /// <example>112</example>
        [DataMember(Name = "bill_id", EmitDefaultValue = false)]
        public string BillId { get; set; }

        /// <summary>
        /// Optional. Use either this or the bill_id
        /// </summary>
        /// <value>Optional. Use either this or the bill_id</value>
        /// <example>Monthly rent</example>
        [DataMember(Name = "bill_name", EmitDefaultValue = false)]
        public string BillName { get; set; }

        /// <summary>
        /// Array of tags.
        /// </summary>
        /// <value>Array of tags.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        /// <example>Some example notes</example>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes { get; set; }

        /// <summary>
        /// Reference to internal reference of other systems.
        /// </summary>
        /// <value>Reference to internal reference of other systems.</value>
        [DataMember(Name = "internal_reference", EmitDefaultValue = false)]
        public string InternalReference { get; set; }

        /// <summary>
        /// Reference to external ID in other systems.
        /// </summary>
        /// <value>Reference to external ID in other systems.</value>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// External, custom URL for this transaction.
        /// </summary>
        /// <value>External, custom URL for this transaction.</value>
        [DataMember(Name = "external_url", EmitDefaultValue = false)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Internal ID of bunq transaction. Field is no longer used but still works.
        /// </summary>
        /// <value>Internal ID of bunq transaction. Field is no longer used but still works.</value>
        [DataMember(Name = "bunq_payment_id", EmitDefaultValue = false)]
        public string BunqPaymentId { get; set; }

        /// <summary>
        /// SEPA Clearing Code
        /// </summary>
        /// <value>SEPA Clearing Code</value>
        [DataMember(Name = "sepa_cc", EmitDefaultValue = false)]
        public string SepaCc { get; set; }

        /// <summary>
        /// SEPA Opposing Account Identifier
        /// </summary>
        /// <value>SEPA Opposing Account Identifier</value>
        [DataMember(Name = "sepa_ct_op", EmitDefaultValue = false)]
        public string SepaCtOp { get; set; }

        /// <summary>
        /// SEPA end-to-end Identifier
        /// </summary>
        /// <value>SEPA end-to-end Identifier</value>
        [DataMember(Name = "sepa_ct_id", EmitDefaultValue = false)]
        public string SepaCtId { get; set; }

        /// <summary>
        /// SEPA mandate identifier
        /// </summary>
        /// <value>SEPA mandate identifier</value>
        [DataMember(Name = "sepa_db", EmitDefaultValue = false)]
        public string SepaDb { get; set; }

        /// <summary>
        /// SEPA Country
        /// </summary>
        /// <value>SEPA Country</value>
        [DataMember(Name = "sepa_country", EmitDefaultValue = false)]
        public string SepaCountry { get; set; }

        /// <summary>
        /// SEPA External Purpose indicator
        /// </summary>
        /// <value>SEPA External Purpose indicator</value>
        [DataMember(Name = "sepa_ep", EmitDefaultValue = false)]
        public string SepaEp { get; set; }

        /// <summary>
        /// SEPA Creditor Identifier
        /// </summary>
        /// <value>SEPA Creditor Identifier</value>
        [DataMember(Name = "sepa_ci", EmitDefaultValue = false)]
        public string SepaCi { get; set; }

        /// <summary>
        /// SEPA Batch ID
        /// </summary>
        /// <value>SEPA Batch ID</value>
        [DataMember(Name = "sepa_batch_id", EmitDefaultValue = false)]
        public string SepaBatchId { get; set; }

        /// <summary>
        /// Gets or Sets InterestDate
        /// </summary>
        [DataMember(Name = "interest_date", EmitDefaultValue = false)]
        public DateTime? InterestDate { get; set; }

        /// <summary>
        /// Gets or Sets BookDate
        /// </summary>
        [DataMember(Name = "book_date", EmitDefaultValue = false)]
        public DateTime? BookDate { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDate
        /// </summary>
        [DataMember(Name = "process_date", EmitDefaultValue = false)]
        public DateTime? ProcessDate { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name = "due_date", EmitDefaultValue = false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDate
        /// </summary>
        [DataMember(Name = "payment_date", EmitDefaultValue = false)]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name = "invoice_date", EmitDefaultValue = false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionSplitStore {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ForeignAmount: ").Append(ForeignAmount).Append("\n");
            sb.Append("  ForeignCurrencyId: ").Append(ForeignCurrencyId).Append("\n");
            sb.Append("  ForeignCurrencyCode: ").Append(ForeignCurrencyCode).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  BudgetName: ").Append(BudgetName).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  PiggyBankId: ").Append(PiggyBankId).Append("\n");
            sb.Append("  PiggyBankName: ").Append(PiggyBankName).Append("\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillName: ").Append(BillName).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  InternalReference: ").Append(InternalReference).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  BunqPaymentId: ").Append(BunqPaymentId).Append("\n");
            sb.Append("  SepaCc: ").Append(SepaCc).Append("\n");
            sb.Append("  SepaCtOp: ").Append(SepaCtOp).Append("\n");
            sb.Append("  SepaCtId: ").Append(SepaCtId).Append("\n");
            sb.Append("  SepaDb: ").Append(SepaDb).Append("\n");
            sb.Append("  SepaCountry: ").Append(SepaCountry).Append("\n");
            sb.Append("  SepaEp: ").Append(SepaEp).Append("\n");
            sb.Append("  SepaCi: ").Append(SepaCi).Append("\n");
            sb.Append("  SepaBatchId: ").Append(SepaBatchId).Append("\n");
            sb.Append("  InterestDate: ").Append(InterestDate).Append("\n");
            sb.Append("  BookDate: ").Append(BookDate).Append("\n");
            sb.Append("  ProcessDate: ").Append(ProcessDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransactionSplitStore);
        }

        /// <summary>
        /// Returns true if TransactionSplitStore instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSplitStore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSplitStore input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) && 
                (
                    Date == input.Date ||
					Date.Equals(input.Date)
                ) && 
                (
                    Amount == input.Amount ||
					Amount.Equals(input.Amount)
                ) && 
                (
                    Description == input.Description ||
					Description.Equals(input.Description)
                ) && 
                (
                    Order == input.Order ||
                    (Order != null &&
                    Order.Equals(input.Order))
                ) && 
                (
                    CurrencyId == input.CurrencyId ||
                    (CurrencyId != null &&
                    CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    CurrencyCode == input.CurrencyCode ||
                    (CurrencyCode != null &&
                    CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    ForeignAmount == input.ForeignAmount ||
                    (ForeignAmount != null &&
                    ForeignAmount.Equals(input.ForeignAmount))
                ) && 
                (
                    ForeignCurrencyId == input.ForeignCurrencyId ||
                    (ForeignCurrencyId != null &&
                    ForeignCurrencyId.Equals(input.ForeignCurrencyId))
                ) && 
                (
                    ForeignCurrencyCode == input.ForeignCurrencyCode ||
                    (ForeignCurrencyCode != null &&
                    ForeignCurrencyCode.Equals(input.ForeignCurrencyCode))
                ) && 
                (
                    BudgetId == input.BudgetId ||
                    (BudgetId != null &&
                    BudgetId.Equals(input.BudgetId))
                ) && 
                (
                    BudgetName == input.BudgetName ||
                    (BudgetName != null &&
                    BudgetName.Equals(input.BudgetName))
                ) && 
                (
                    CategoryId == input.CategoryId ||
                    (CategoryId != null &&
                    CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    CategoryName == input.CategoryName ||
                    (CategoryName != null &&
                    CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    SourceId == input.SourceId ||
                    (SourceId != null &&
                    SourceId.Equals(input.SourceId))
                ) && 
                (
                    SourceName == input.SourceName ||
                    (SourceName != null &&
                    SourceName.Equals(input.SourceName))
                ) && 
                (
                    DestinationId == input.DestinationId ||
                    (DestinationId != null &&
                    DestinationId.Equals(input.DestinationId))
                ) && 
                (
                    DestinationName == input.DestinationName ||
                    (DestinationName != null &&
                    DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    Reconciled == input.Reconciled ||
                    Reconciled.Equals(input.Reconciled)
                ) && 
                (
                    PiggyBankId == input.PiggyBankId ||
                    PiggyBankId.Equals(input.PiggyBankId)
                ) && 
                (
                    PiggyBankName == input.PiggyBankName ||
					PiggyBankName.Equals(input.PiggyBankName)
                ) && 
                (
                    BillId == input.BillId ||
                    (BillId != null &&
                    BillId.Equals(input.BillId))
                ) && 
                (
                    BillName == input.BillName ||
                    (BillName != null &&
                    BillName.Equals(input.BillName))
                ) && 
                (
                    Tags == input.Tags ||
                    Tags != null &&
                    input.Tags != null &&
                    Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    Notes == input.Notes ||
                    (Notes != null &&
                    Notes.Equals(input.Notes))
                ) && 
                (
                    InternalReference == input.InternalReference ||
                    (InternalReference != null &&
                    InternalReference.Equals(input.InternalReference))
                ) && 
                (
                    ExternalId == input.ExternalId ||
                    (ExternalId != null &&
                    ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    ExternalUrl == input.ExternalUrl ||
                    (ExternalUrl != null &&
                    ExternalUrl.Equals(input.ExternalUrl))
                ) && 
                (
                    BunqPaymentId == input.BunqPaymentId ||
                    (BunqPaymentId != null &&
                    BunqPaymentId.Equals(input.BunqPaymentId))
                ) && 
                (
                    SepaCc == input.SepaCc ||
                    (SepaCc != null &&
                    SepaCc.Equals(input.SepaCc))
                ) && 
                (
                    SepaCtOp == input.SepaCtOp ||
                    (SepaCtOp != null &&
                    SepaCtOp.Equals(input.SepaCtOp))
                ) && 
                (
                    SepaCtId == input.SepaCtId ||
                    (SepaCtId != null &&
                    SepaCtId.Equals(input.SepaCtId))
                ) && 
                (
                    SepaDb == input.SepaDb ||
                    (SepaDb != null &&
                    SepaDb.Equals(input.SepaDb))
                ) && 
                (
                    SepaCountry == input.SepaCountry ||
                    (SepaCountry != null &&
                    SepaCountry.Equals(input.SepaCountry))
                ) && 
                (
                    SepaEp == input.SepaEp ||
                    (SepaEp != null &&
                    SepaEp.Equals(input.SepaEp))
                ) && 
                (
                    SepaCi == input.SepaCi ||
                    (SepaCi != null &&
                    SepaCi.Equals(input.SepaCi))
                ) && 
                (
                    SepaBatchId == input.SepaBatchId ||
                    (SepaBatchId != null &&
                    SepaBatchId.Equals(input.SepaBatchId))
                ) && 
                (
                    InterestDate == input.InterestDate ||
                    (InterestDate != null &&
                    InterestDate.Equals(input.InterestDate))
                ) && 
                (
                    BookDate == input.BookDate ||
                    (BookDate != null &&
                    BookDate.Equals(input.BookDate))
                ) && 
                (
                    ProcessDate == input.ProcessDate ||
                    (ProcessDate != null &&
                    ProcessDate.Equals(input.ProcessDate))
                ) && 
                (
                    DueDate == input.DueDate ||
                    (DueDate != null &&
                    DueDate.Equals(input.DueDate))
                ) && 
                (
                    PaymentDate == input.PaymentDate ||
                    (PaymentDate != null &&
                    PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    InvoiceDate == input.InvoiceDate ||
                    (InvoiceDate != null &&
                    InvoiceDate.Equals(input.InvoiceDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Type.GetHashCode();
				hashCode = (hashCode * 59) + Date.GetHashCode();
				hashCode = (hashCode * 59) + Amount.GetHashCode();
				hashCode = (hashCode * 59) + Description.GetHashCode();
                if (Order != null)
                {
                    hashCode = (hashCode * 59) + Order.GetHashCode();
                }
                if (CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + CurrencyId.GetHashCode();
                }
                if (CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + CurrencyCode.GetHashCode();
                }
                if (ForeignAmount != null)
                {
                    hashCode = (hashCode * 59) + ForeignAmount.GetHashCode();
                }
                if (ForeignCurrencyId != null)
                {
                    hashCode = (hashCode * 59) + ForeignCurrencyId.GetHashCode();
                }
                if (ForeignCurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + ForeignCurrencyCode.GetHashCode();
                }
                if (BudgetId != null)
                {
                    hashCode = (hashCode * 59) + BudgetId.GetHashCode();
                }
                if (BudgetName != null)
                {
                    hashCode = (hashCode * 59) + BudgetName.GetHashCode();
                }
                if (CategoryId != null)
                {
                    hashCode = (hashCode * 59) + CategoryId.GetHashCode();
                }
                if (CategoryName != null)
                {
                    hashCode = (hashCode * 59) + CategoryName.GetHashCode();
                }
                if (SourceId != null)
                {
                    hashCode = (hashCode * 59) + SourceId.GetHashCode();
                }
                if (SourceName != null)
                {
                    hashCode = (hashCode * 59) + SourceName.GetHashCode();
                }
                if (DestinationId != null)
                {
                    hashCode = (hashCode * 59) + DestinationId.GetHashCode();
                }
                if (DestinationName != null)
                {
                    hashCode = (hashCode * 59) + DestinationName.GetHashCode();
                }
                hashCode = (hashCode * 59) + Reconciled.GetHashCode();
                hashCode = (hashCode * 59) + PiggyBankId.GetHashCode();
				hashCode = (hashCode * 59) + PiggyBankName.GetHashCode();
                if (BillId != null)
                {
                    hashCode = (hashCode * 59) + BillId.GetHashCode();
                }
                if (BillName != null)
                {
                    hashCode = (hashCode * 59) + BillName.GetHashCode();
                }
                if (Tags != null)
                {
                    hashCode = (hashCode * 59) + Tags.GetHashCode();
                }
                if (Notes != null)
                {
                    hashCode = (hashCode * 59) + Notes.GetHashCode();
                }
                if (InternalReference != null)
                {
                    hashCode = (hashCode * 59) + InternalReference.GetHashCode();
                }
                if (ExternalId != null)
                {
                    hashCode = (hashCode * 59) + ExternalId.GetHashCode();
                }
                if (ExternalUrl != null)
                {
                    hashCode = (hashCode * 59) + ExternalUrl.GetHashCode();
                }
                if (BunqPaymentId != null)
                {
                    hashCode = (hashCode * 59) + BunqPaymentId.GetHashCode();
                }
                if (SepaCc != null)
                {
                    hashCode = (hashCode * 59) + SepaCc.GetHashCode();
                }
                if (SepaCtOp != null)
                {
                    hashCode = (hashCode * 59) + SepaCtOp.GetHashCode();
                }
                if (SepaCtId != null)
                {
                    hashCode = (hashCode * 59) + SepaCtId.GetHashCode();
                }
                if (SepaDb != null)
                {
                    hashCode = (hashCode * 59) + SepaDb.GetHashCode();
                }
                if (SepaCountry != null)
                {
                    hashCode = (hashCode * 59) + SepaCountry.GetHashCode();
                }
                if (SepaEp != null)
                {
                    hashCode = (hashCode * 59) + SepaEp.GetHashCode();
                }
                if (SepaCi != null)
                {
                    hashCode = (hashCode * 59) + SepaCi.GetHashCode();
                }
                if (SepaBatchId != null)
                {
                    hashCode = (hashCode * 59) + SepaBatchId.GetHashCode();
                }
                if (InterestDate != null)
                {
                    hashCode = (hashCode * 59) + InterestDate.GetHashCode();
                }
                if (BookDate != null)
                {
                    hashCode = (hashCode * 59) + BookDate.GetHashCode();
                }
                if (ProcessDate != null)
                {
                    hashCode = (hashCode * 59) + ProcessDate.GetHashCode();
                }
                if (DueDate != null)
                {
                    hashCode = (hashCode * 59) + DueDate.GetHashCode();
                }
                if (PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + PaymentDate.GetHashCode();
                }
                if (InvoiceDate != null)
                {
                    hashCode = (hashCode * 59) + InvoiceDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
