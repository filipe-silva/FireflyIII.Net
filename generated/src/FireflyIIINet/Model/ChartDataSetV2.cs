/*
 * Firefly III API v2.0.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-08-06T04:35:40+00:00 
 *
 * The version of the OpenAPI document: 2.0.5
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// ChartDataSetV2
    /// </summary>
    [DataContract(Name = "ChartDataSetV2")]
    public partial class ChartDataSetV2 : IEquatable<ChartDataSetV2>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = true)]
        public ChartV2PeriodProperty? Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChartDataSetV2" /> class.
        /// </summary>
        /// <param name="label">This is the label of the current data-set. It can refer to an object by name, or a collected set of data..</param>
        /// <param name="currencyId">The currency ID of the currency associated to the data in the entries..</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="currencySymbol">currencySymbol.</param>
        /// <param name="currencyDecimalPlaces">Number of decimals for the currency associated to the data in the entries..</param>
        /// <param name="nativeId">The currency ID of the user&#39;s native (default) currency..</param>
        /// <param name="nativeCode">The currency code of the user&#39;s native (default) currency..</param>
        /// <param name="nativeSymbol">The currency symbol of the user&#39;s native (default) currency..</param>
        /// <param name="nativeDecimalPlaces">Number of decimals for the native (default) currency of the user..</param>
        /// <param name="start">Holds the date and time of start of the range of data collected. It could be there was no data for this point in time, but this is the start of the requested range..</param>
        /// <param name="end">Holds the date and time of END of the range of data collected. It could be there was no data for this point in time, but this is the end of the requested range..</param>
        /// <param name="period">period.</param>
        /// <param name="entries">The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value..</param>
        /// <param name="nativeEntries">The entries for this data set converted to the user&#39;s native (default) currency. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value..</param>
        public ChartDataSetV2(string label = default(string), string currencyId = default(string), string currencyCode = default(string), string currencySymbol = default(string), int currencyDecimalPlaces = default(int), string nativeId = default(string), string nativeCode = default(string), string nativeSymbol = default(string), int nativeDecimalPlaces = default(int), DateTime start = default(DateTime), DateTime end = default(DateTime), ChartV2PeriodProperty? period = default(ChartV2PeriodProperty?), List<ChartDataPointV2> entries = default(List<ChartDataPointV2>), List<ChartDataPointV2> nativeEntries = default(List<ChartDataPointV2>))
        {
            this.Label = label;
            this.CurrencyId = currencyId;
            this.CurrencyCode = currencyCode;
            this.CurrencySymbol = currencySymbol;
            this.CurrencyDecimalPlaces = currencyDecimalPlaces;
            this.NativeId = nativeId;
            this.NativeCode = nativeCode;
            this.NativeSymbol = nativeSymbol;
            this.NativeDecimalPlaces = nativeDecimalPlaces;
            this.Start = start;
            this.End = end;
            this.Period = period;
            this.Entries = entries;
            this.NativeEntries = nativeEntries;
        }

        /// <summary>
        /// This is the label of the current data-set. It can refer to an object by name, or a collected set of data.
        /// </summary>
        /// <value>This is the label of the current data-set. It can refer to an object by name, or a collected set of data.</value>
        /// <example>earned-EUR</example>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The currency ID of the currency associated to the data in the entries.
        /// </summary>
        /// <value>The currency ID of the currency associated to the data in the entries.</value>
        /// <example>5</example>
        [DataMember(Name = "currency_id", EmitDefaultValue = false)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        /// <example>EUR</example>
        [DataMember(Name = "currency_code", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        /// <example>$</example>
        [DataMember(Name = "currency_symbol", EmitDefaultValue = false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Number of decimals for the currency associated to the data in the entries.
        /// </summary>
        /// <value>Number of decimals for the currency associated to the data in the entries.</value>
        /// <example>2</example>
        [DataMember(Name = "currency_decimal_places", EmitDefaultValue = false)]
        public int CurrencyDecimalPlaces { get; set; }

        /// <summary>
        /// The currency ID of the user&#39;s native (default) currency.
        /// </summary>
        /// <value>The currency ID of the user&#39;s native (default) currency.</value>
        /// <example>5</example>
        [DataMember(Name = "native_id", EmitDefaultValue = false)]
        public string NativeId { get; set; }

        /// <summary>
        /// The currency code of the user&#39;s native (default) currency.
        /// </summary>
        /// <value>The currency code of the user&#39;s native (default) currency.</value>
        /// <example>EUR</example>
        [DataMember(Name = "native_code", EmitDefaultValue = false)]
        public string NativeCode { get; set; }

        /// <summary>
        /// The currency symbol of the user&#39;s native (default) currency.
        /// </summary>
        /// <value>The currency symbol of the user&#39;s native (default) currency.</value>
        /// <example>$</example>
        [DataMember(Name = "native_symbol", EmitDefaultValue = false)]
        public string NativeSymbol { get; set; }

        /// <summary>
        /// Number of decimals for the native (default) currency of the user.
        /// </summary>
        /// <value>Number of decimals for the native (default) currency of the user.</value>
        /// <example>2</example>
        [DataMember(Name = "native_decimal_places", EmitDefaultValue = false)]
        public int NativeDecimalPlaces { get; set; }

        /// <summary>
        /// Holds the date and time of start of the range of data collected. It could be there was no data for this point in time, but this is the start of the requested range.
        /// </summary>
        /// <value>Holds the date and time of start of the range of data collected. It could be there was no data for this point in time, but this is the start of the requested range.</value>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Holds the date and time of END of the range of data collected. It could be there was no data for this point in time, but this is the end of the requested range.
        /// </summary>
        /// <value>Holds the date and time of END of the range of data collected. It could be there was no data for this point in time, but this is the end of the requested range.</value>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public DateTime End { get; set; }

        /// <summary>
        /// The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.
        /// </summary>
        /// <value>The actual entries for this data set. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</value>
        [DataMember(Name = "entries", EmitDefaultValue = false)]
        public List<ChartDataPointV2> Entries { get; set; }

        /// <summary>
        /// The entries for this data set converted to the user&#39;s native (default) currency. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.
        /// </summary>
        /// <value>The entries for this data set converted to the user&#39;s native (default) currency. They &#39;key&#39; value is the label for the data point. The value is the actual (numerical) value.</value>
        [DataMember(Name = "native_entries", EmitDefaultValue = false)]
        public List<ChartDataPointV2> NativeEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChartDataSetV2 {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyDecimalPlaces: ").Append(CurrencyDecimalPlaces).Append("\n");
            sb.Append("  NativeId: ").Append(NativeId).Append("\n");
            sb.Append("  NativeCode: ").Append(NativeCode).Append("\n");
            sb.Append("  NativeSymbol: ").Append(NativeSymbol).Append("\n");
            sb.Append("  NativeDecimalPlaces: ").Append(NativeDecimalPlaces).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  NativeEntries: ").Append(NativeEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChartDataSetV2);
        }

        /// <summary>
        /// Returns true if ChartDataSetV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ChartDataSetV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChartDataSetV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.CurrencyDecimalPlaces == input.CurrencyDecimalPlaces ||
                    this.CurrencyDecimalPlaces.Equals(input.CurrencyDecimalPlaces)
                ) && 
                (
                    this.NativeId == input.NativeId ||
                    (this.NativeId != null &&
                    this.NativeId.Equals(input.NativeId))
                ) && 
                (
                    this.NativeCode == input.NativeCode ||
                    (this.NativeCode != null &&
                    this.NativeCode.Equals(input.NativeCode))
                ) && 
                (
                    this.NativeSymbol == input.NativeSymbol ||
                    (this.NativeSymbol != null &&
                    this.NativeSymbol.Equals(input.NativeSymbol))
                ) && 
                (
                    this.NativeDecimalPlaces == input.NativeDecimalPlaces ||
                    this.NativeDecimalPlaces.Equals(input.NativeDecimalPlaces)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.NativeEntries == input.NativeEntries ||
                    this.NativeEntries != null &&
                    input.NativeEntries != null &&
                    this.NativeEntries.SequenceEqual(input.NativeEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.CurrencySymbol != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencySymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrencyDecimalPlaces.GetHashCode();
                if (this.NativeId != null)
                {
                    hashCode = (hashCode * 59) + this.NativeId.GetHashCode();
                }
                if (this.NativeCode != null)
                {
                    hashCode = (hashCode * 59) + this.NativeCode.GetHashCode();
                }
                if (this.NativeSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.NativeSymbol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NativeDecimalPlaces.GetHashCode();
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                if (this.Entries != null)
                {
                    hashCode = (hashCode * 59) + this.Entries.GetHashCode();
                }
                if (this.NativeEntries != null)
                {
                    hashCode = (hashCode * 59) + this.NativeEntries.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
