/*
 * Firefly III API v2.0.6
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-09-01T03:14:46+00:00 
 *
 * The version of the OpenAPI document: 2.0.6
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// ValidationErrorErrors
    /// </summary>
    [DataContract(Name = "ValidationError_errors")]
    public partial class ValidationErrorErrors : IEquatable<ValidationErrorErrors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationErrorErrors" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="blocked">blocked.</param>
        /// <param name="role">role.</param>
        /// <param name="blockedCode">blockedCode.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="iban">iban.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="date">date.</param>
        public ValidationErrorErrors(List<string> email = default(List<string>), List<string> blocked = default(List<string>), List<string> role = default(List<string>), List<string> blockedCode = default(List<string>), List<string> name = default(List<string>), List<string> type = default(List<string>), List<string> iban = default(List<string>), List<string> start = default(List<string>), List<string> end = default(List<string>), List<string> date = default(List<string>))
        {
            this.Email = email;
            this.Blocked = blocked;
            this.Role = role;
            this.BlockedCode = blockedCode;
            this.Name = name;
            this.Type = type;
            this.Iban = iban;
            this.Start = start;
            this.End = end;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public List<string> Email { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name = "blocked", EmitDefaultValue = false)]
        public List<string> Blocked { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public List<string> Role { get; set; }

        /// <summary>
        /// Gets or Sets BlockedCode
        /// </summary>
        [DataMember(Name = "blocked_code", EmitDefaultValue = false)]
        public List<string> BlockedCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public List<string> Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public List<string> Type { get; set; }

        /// <summary>
        /// Gets or Sets Iban
        /// </summary>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public List<string> Iban { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public List<string> Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public List<string> End { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public List<string> Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationErrorErrors {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  BlockedCode: ").Append(BlockedCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidationErrorErrors);
        }

        /// <summary>
        /// Returns true if ValidationErrorErrors instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationErrorErrors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationErrorErrors input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    this.Blocked != null &&
                    input.Blocked != null &&
                    this.Blocked.SequenceEqual(input.Blocked)
                ) && 
                (
                    this.Role == input.Role ||
                    this.Role != null &&
                    input.Role != null &&
                    this.Role.SequenceEqual(input.Role)
                ) && 
                (
                    this.BlockedCode == input.BlockedCode ||
                    this.BlockedCode != null &&
                    input.BlockedCode != null &&
                    this.BlockedCode.SequenceEqual(input.BlockedCode)
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type != null &&
                    input.Type != null &&
                    this.Type.SequenceEqual(input.Type)
                ) && 
                (
                    this.Iban == input.Iban ||
                    this.Iban != null &&
                    input.Iban != null &&
                    this.Iban.SequenceEqual(input.Iban)
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start != null &&
                    input.Start != null &&
                    this.Start.SequenceEqual(input.Start)
                ) && 
                (
                    this.End == input.End ||
                    this.End != null &&
                    input.End != null &&
                    this.End.SequenceEqual(input.End)
                ) && 
                (
                    this.Date == input.Date ||
                    this.Date != null &&
                    input.Date != null &&
                    this.Date.SequenceEqual(input.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Blocked != null)
                {
                    hashCode = (hashCode * 59) + this.Blocked.GetHashCode();
                }
                if (this.Role != null)
                {
                    hashCode = (hashCode * 59) + this.Role.GetHashCode();
                }
                if (this.BlockedCode != null)
                {
                    hashCode = (hashCode * 59) + this.BlockedCode.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Iban != null)
                {
                    hashCode = (hashCode * 59) + this.Iban.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
