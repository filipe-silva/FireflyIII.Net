/*
 * Firefly III API v1.5.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-04-01T18:51:42+00:00 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// WebhookAttempt
    /// </summary>
    [DataContract(Name = "WebhookAttempt")]
    public partial class WebhookAttempt : IEquatable<WebhookAttempt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttempt" /> class.
        /// </summary>
        /// <param name="webhookMessageId">The ID of the webhook message this attempt belongs to..</param>
        /// <param name="statusCode">The HTTP status code of the error, if any..</param>
        /// <param name="logs">Internal log for this attempt. May contain sensitive user data..</param>
        /// <param name="response">Webhook receiver response for this attempt, if any. May contain sensitive user data..</param>
        public WebhookAttempt(string webhookMessageId = default(string), int? statusCode = default(int?), string logs = default(string), string response = default(string))
        {
            this.WebhookMessageId = webhookMessageId;
            this.StatusCode = statusCode;
            this.Logs = logs;
            this.Response = response;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The ID of the webhook message this attempt belongs to.
        /// </summary>
        /// <value>The ID of the webhook message this attempt belongs to.</value>
        /// <example>5</example>
        [DataMember(Name = "webhook_message_id", EmitDefaultValue = false)]
        public string WebhookMessageId { get; set; }

        /// <summary>
        /// The HTTP status code of the error, if any.
        /// </summary>
        /// <value>The HTTP status code of the error, if any.</value>
        /// <example>404</example>
        [DataMember(Name = "status_code", EmitDefaultValue = true)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Internal log for this attempt. May contain sensitive user data.
        /// </summary>
        /// <value>Internal log for this attempt. May contain sensitive user data.</value>
        /// <example>Page not found</example>
        [DataMember(Name = "logs", EmitDefaultValue = true)]
        public string Logs { get; set; }

        /// <summary>
        /// Webhook receiver response for this attempt, if any. May contain sensitive user data.
        /// </summary>
        /// <value>Webhook receiver response for this attempt, if any. May contain sensitive user data.</value>
        /// <example>Page not found</example>
        [DataMember(Name = "response", EmitDefaultValue = true)]
        public string Response { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookAttempt {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WebhookMessageId: ").Append(WebhookMessageId).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookAttempt);
        }

        /// <summary>
        /// Returns true if WebhookAttempt instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookAttempt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookAttempt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.WebhookMessageId == input.WebhookMessageId ||
                    (this.WebhookMessageId != null &&
                    this.WebhookMessageId.Equals(input.WebhookMessageId))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Logs == input.Logs ||
                    (this.Logs != null &&
                    this.Logs.Equals(input.Logs))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.WebhookMessageId != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookMessageId.GetHashCode();
                }
                if (this.StatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                }
                if (this.Logs != null)
                {
                    hashCode = (hashCode * 59) + this.Logs.GetHashCode();
                }
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
