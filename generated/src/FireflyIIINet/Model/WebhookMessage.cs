/*
 * Firefly III API v1.5.1
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-04-04T11:50:40+00:00 
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FireflyIIINet.Client.OpenAPIDateConverter;

namespace FireflyIIINet.Model
{
    /// <summary>
    /// WebhookMessage
    /// </summary>
    [DataContract(Name = "WebhookMessage")]
    public partial class WebhookMessage : IEquatable<WebhookMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookMessage" /> class.
        /// </summary>
        /// <param name="sent">If this message is sent yet..</param>
        /// <param name="errored">If this message has errored out..</param>
        /// <param name="webhookId">The ID of the webhook this message belongs to..</param>
        /// <param name="uuid">Long UUID string for identification of this webhook message..</param>
        /// <param name="varString">The actual message that is sent or will be sent as JSON string..</param>
        public WebhookMessage(bool sent = default(bool), bool errored = default(bool), string webhookId = default(string), string uuid = default(string), string varString = default(string))
        {
            this.Sent = sent;
            this.Errored = errored;
            this.WebhookId = webhookId;
            this.Uuid = uuid;
            this.VarString = varString;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2018-09-17T12:46:47+01:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// If this message is sent yet.
        /// </summary>
        /// <value>If this message is sent yet.</value>
        /// <example>false</example>
        [DataMember(Name = "sent", EmitDefaultValue = true)]
        public bool Sent { get; set; }

        /// <summary>
        /// If this message has errored out.
        /// </summary>
        /// <value>If this message has errored out.</value>
        /// <example>false</example>
        [DataMember(Name = "errored", EmitDefaultValue = true)]
        public bool Errored { get; set; }

        /// <summary>
        /// The ID of the webhook this message belongs to.
        /// </summary>
        /// <value>The ID of the webhook this message belongs to.</value>
        /// <example>5</example>
        [DataMember(Name = "webhook_id", EmitDefaultValue = false)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Long UUID string for identification of this webhook message.
        /// </summary>
        /// <value>Long UUID string for identification of this webhook message.</value>
        /// <example>7a344c02-5b52-46b1-90e6-a437431dcf07</example>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The actual message that is sent or will be sent as JSON string.
        /// </summary>
        /// <value>The actual message that is sent or will be sent as JSON string.</value>
        /// <example>{some:message}</example>
        [DataMember(Name = "string", EmitDefaultValue = true)]
        public string VarString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookMessage {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookMessage);
        }

        /// <summary>
        /// Returns true if WebhookMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Sent == input.Sent ||
                    this.Sent.Equals(input.Sent)
                ) && 
                (
                    this.Errored == input.Errored ||
                    this.Errored.Equals(input.Errored)
                ) && 
                (
                    this.WebhookId == input.WebhookId ||
                    (this.WebhookId != null &&
                    this.WebhookId.Equals(input.WebhookId))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.VarString == input.VarString ||
                    (this.VarString != null &&
                    this.VarString.Equals(input.VarString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sent.GetHashCode();
                hashCode = (hashCode * 59) + this.Errored.GetHashCode();
                if (this.WebhookId != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookId.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.VarString != null)
                {
                    hashCode = (hashCode * 59) + this.VarString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
