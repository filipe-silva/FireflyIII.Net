/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing BudgetsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BudgetsApiTests : IDisposable
    {
        private BudgetsApi instance;

        public BudgetsApiTests()
        {
            instance = new BudgetsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BudgetsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BudgetsApi
            //Assert.IsType<BudgetsApi>(instance);
        }

        /// <summary>
        /// Test DeleteBudget
        /// </summary>
        [Fact]
        public void DeleteBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteBudget(id, xTraceId);
        }

        /// <summary>
        /// Test DeleteBudgetLimit
        /// </summary>
        [Fact]
        public void DeleteBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string limitId = null;
            //Guid? xTraceId = null;
            //instance.DeleteBudgetLimit(id, limitId, xTraceId);
        }

        /// <summary>
        /// Test GetBudget
        /// </summary>
        [Fact]
        public void GetBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.GetBudget(id, xTraceId, start, end);
            //Assert.IsType<BudgetSingle>(response);
        }

        /// <summary>
        /// Test GetBudgetLimit
        /// </summary>
        [Fact]
        public void GetBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int limitId = null;
            //Guid? xTraceId = null;
            //var response = instance.GetBudgetLimit(id, limitId, xTraceId);
            //Assert.IsType<BudgetLimitSingle>(response);
        }

        /// <summary>
        /// Test GetBudgetedForBudget
        /// </summary>
        [Fact]
        public void GetBudgetedForBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.GetBudgetedForBudget(start, end, id, xTraceId, page);
            //Assert.IsType<List<TransactionSum>>(response);
        }

        /// <summary>
        /// Test GetBudgetedForBudgets
        /// </summary>
        [Fact]
        public void GetBudgetedForBudgetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.GetBudgetedForBudgets(start, end, id, xTraceId, page);
            //Assert.IsType<List<TransactionSum>>(response);
        }

        /// <summary>
        /// Test GetSpentForBudget
        /// </summary>
        [Fact]
        public void GetSpentForBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.GetSpentForBudget(start, end, id, xTraceId, page);
            //Assert.IsType<List<TransactionSum>>(response);
        }

        /// <summary>
        /// Test GetSpentForBudgets
        /// </summary>
        [Fact]
        public void GetSpentForBudgetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.GetSpentForBudgets(start, end, id, xTraceId, page);
            //Assert.IsType<List<TransactionSum>>(response);
        }

        /// <summary>
        /// Test ListAttachmentByBudget
        /// </summary>
        [Fact]
        public void ListAttachmentByBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAttachmentByBudget(id, xTraceId, page);
            //Assert.IsType<AttachmentArray>(response);
        }

        /// <summary>
        /// Test ListBudget
        /// </summary>
        [Fact]
        public void ListBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.ListBudget(xTraceId, page, start, end);
            //Assert.IsType<BudgetArray>(response);
        }

        /// <summary>
        /// Test ListBudgetLimit
        /// </summary>
        [Fact]
        public void ListBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //Guid? xTraceId = null;
            //var response = instance.ListBudgetLimit(start, end, xTraceId);
            //Assert.IsType<BudgetLimitArray>(response);
        }

        /// <summary>
        /// Test ListBudgetLimitByBudget
        /// </summary>
        [Fact]
        public void ListBudgetLimitByBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.ListBudgetLimitByBudget(id, xTraceId, start, end);
            //Assert.IsType<BudgetLimitArray>(response);
        }

        /// <summary>
        /// Test ListBudgetLimitByBudgetV2
        /// </summary>
        [Fact]
        public void ListBudgetLimitByBudgetV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime start = null;
            //DateTime end = null;
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.ListBudgetLimitByBudgetV2(start, end, id, xTraceId);
            //Assert.IsType<BudgetLimitV2Array>(response);
        }

        /// <summary>
        /// Test ListBudgets
        /// </summary>
        [Fact]
        public void ListBudgetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListBudgets(xTraceId, page);
            //Assert.IsType<BudgetV2Array>(response);
        }

        /// <summary>
        /// Test ListTransactionByBudget
        /// </summary>
        [Fact]
        public void ListTransactionByBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? limit = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByBudget(id, xTraceId, limit, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByBudgetLimit
        /// </summary>
        [Fact]
        public void ListTransactionByBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string limitId = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByBudgetLimit(id, limitId, xTraceId, page, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreBudget
        /// </summary>
        [Fact]
        public void StoreBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BudgetStore budgetStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreBudget(budgetStore, xTraceId);
            //Assert.IsType<BudgetSingle>(response);
        }

        /// <summary>
        /// Test StoreBudgetLimit
        /// </summary>
        [Fact]
        public void StoreBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BudgetLimitStore budgetLimitStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreBudgetLimit(id, budgetLimitStore, xTraceId);
            //Assert.IsType<BudgetLimitSingle>(response);
        }

        /// <summary>
        /// Test UpdateBudget
        /// </summary>
        [Fact]
        public void UpdateBudgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //BudgetUpdate budgetUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateBudget(id, budgetUpdate, xTraceId);
            //Assert.IsType<BudgetSingle>(response);
        }

        /// <summary>
        /// Test UpdateBudgetLimit
        /// </summary>
        [Fact]
        public void UpdateBudgetLimitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string limitId = null;
            //BudgetLimit budgetLimit = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateBudgetLimit(id, limitId, budgetLimit, xTraceId);
            //Assert.IsType<BudgetLimitSingle>(response);
        }
    }
}
