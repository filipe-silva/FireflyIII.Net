/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing CurrenciesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CurrenciesApiTests : IDisposable
    {
        private CurrenciesApi instance;

        public CurrenciesApiTests()
        {
            instance = new CurrenciesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CurrenciesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CurrenciesApi
            //Assert.IsType<CurrenciesApi>(instance);
        }

        /// <summary>
        /// Test DefaultCurrency
        /// </summary>
        [Fact]
        public void DefaultCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //var response = instance.DefaultCurrency(code, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test DeleteCurrency
        /// </summary>
        [Fact]
        public void DeleteCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //instance.DeleteCurrency(code, xTraceId);
        }

        /// <summary>
        /// Test DisableCurrency
        /// </summary>
        [Fact]
        public void DisableCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int code = null;
            //Guid? xTraceId = null;
            //var response = instance.DisableCurrency(code, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test EnableCurrency
        /// </summary>
        [Fact]
        public void EnableCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //var response = instance.EnableCurrency(code, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test GetCurrency
        /// </summary>
        [Fact]
        public void GetCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //var response = instance.GetCurrency(code, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test GetDefaultCurrency
        /// </summary>
        [Fact]
        public void GetDefaultCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //var response = instance.GetDefaultCurrency(xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test ListAccountByCurrency
        /// </summary>
        [Fact]
        public void ListAccountByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? date = null;
            //AccountTypeFilter? type = null;
            //var response = instance.ListAccountByCurrency(code, xTraceId, page, date, type);
            //Assert.IsType<AccountArray>(response);
        }

        /// <summary>
        /// Test ListAvailableBudgetByCurrency
        /// </summary>
        [Fact]
        public void ListAvailableBudgetByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAvailableBudgetByCurrency(code, xTraceId, page);
            //Assert.IsType<AvailableBudgetArray>(response);
        }

        /// <summary>
        /// Test ListBillByCurrency
        /// </summary>
        [Fact]
        public void ListBillByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListBillByCurrency(code, xTraceId, page);
            //Assert.IsType<BillArray>(response);
        }

        /// <summary>
        /// Test ListBudgetLimitByCurrency
        /// </summary>
        [Fact]
        public void ListBudgetLimitByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.ListBudgetLimitByCurrency(code, xTraceId, page, start, end);
            //Assert.IsType<BudgetLimitArray>(response);
        }

        /// <summary>
        /// Test ListCurrency
        /// </summary>
        [Fact]
        public void ListCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListCurrency(xTraceId, page);
            //Assert.IsType<CurrencyArray>(response);
        }

        /// <summary>
        /// Test ListRecurrenceByCurrency
        /// </summary>
        [Fact]
        public void ListRecurrenceByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRecurrenceByCurrency(code, xTraceId, page);
            //Assert.IsType<RecurrenceArray>(response);
        }

        /// <summary>
        /// Test ListRuleByCurrency
        /// </summary>
        [Fact]
        public void ListRuleByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRuleByCurrency(code, xTraceId, page);
            //Assert.IsType<RuleArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByCurrency
        /// </summary>
        [Fact]
        public void ListTransactionByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByCurrency(code, xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreCurrency
        /// </summary>
        [Fact]
        public void StoreCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CurrencyStore currencyStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreCurrency(currencyStore, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }

        /// <summary>
        /// Test UpdateCurrency
        /// </summary>
        [Fact]
        public void UpdateCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //CurrencyUpdate currencyUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateCurrency(code, currencyUpdate, xTraceId);
            //Assert.IsType<CurrencySingle>(response);
        }
    }
}
