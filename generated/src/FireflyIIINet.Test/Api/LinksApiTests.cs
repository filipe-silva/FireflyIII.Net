/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing LinksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LinksApiTests : IDisposable
    {
        private LinksApi instance;

        public LinksApiTests()
        {
            instance = new LinksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LinksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LinksApi
            //Assert.IsType<LinksApi>(instance);
        }

        /// <summary>
        /// Test DeleteLinkType
        /// </summary>
        [Fact]
        public void DeleteLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteLinkType(id, xTraceId);
        }

        /// <summary>
        /// Test DeleteTransactionLink
        /// </summary>
        [Fact]
        public void DeleteTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteTransactionLink(id, xTraceId);
        }

        /// <summary>
        /// Test GetLinkType
        /// </summary>
        [Fact]
        public void GetLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetLinkType(id, xTraceId);
            //Assert.IsType<LinkTypeSingle>(response);
        }

        /// <summary>
        /// Test GetTransactionLink
        /// </summary>
        [Fact]
        public void GetTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetTransactionLink(id, xTraceId);
            //Assert.IsType<TransactionLinkSingle>(response);
        }

        /// <summary>
        /// Test ListLinkType
        /// </summary>
        [Fact]
        public void ListLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListLinkType(xTraceId, page);
            //Assert.IsType<LinkTypeArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByLinkType
        /// </summary>
        [Fact]
        public void ListTransactionByLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByLinkType(id, xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test ListTransactionLink
        /// </summary>
        [Fact]
        public void ListTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListTransactionLink(xTraceId, page);
            //Assert.IsType<TransactionLinkArray>(response);
        }

        /// <summary>
        /// Test StoreLinkType
        /// </summary>
        [Fact]
        public void StoreLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LinkType linkType = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreLinkType(linkType, xTraceId);
            //Assert.IsType<LinkTypeSingle>(response);
        }

        /// <summary>
        /// Test StoreTransactionLink
        /// </summary>
        [Fact]
        public void StoreTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionLinkStore transactionLinkStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreTransactionLink(transactionLinkStore, xTraceId);
            //Assert.IsType<TransactionLinkSingle>(response);
        }

        /// <summary>
        /// Test UpdateLinkType
        /// </summary>
        [Fact]
        public void UpdateLinkTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //LinkTypeUpdate linkTypeUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateLinkType(id, linkTypeUpdate, xTraceId);
            //Assert.IsType<LinkTypeSingle>(response);
        }

        /// <summary>
        /// Test UpdateTransactionLink
        /// </summary>
        [Fact]
        public void UpdateTransactionLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TransactionLinkUpdate transactionLinkUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateTransactionLink(id, transactionLinkUpdate, xTraceId);
            //Assert.IsType<TransactionLinkSingle>(response);
        }
    }
}
