/*
 * Firefly III API v1.5.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-04-01T18:51:42+00:00 
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhooksApiTests : IDisposable
    {
        private WebhooksApi instance;

        public WebhooksApiTests()
        {
            instance = new WebhooksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WebhooksApi
            //Assert.IsType<WebhooksApi>(instance);
        }

        /// <summary>
        /// Test DeleteWebhook
        /// </summary>
        [Fact]
        public void DeleteWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteWebhook(id);
        }

        /// <summary>
        /// Test DeleteWebhookMessage
        /// </summary>
        [Fact]
        public void DeleteWebhookMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int messageId = null;
            //instance.DeleteWebhookMessage(id, messageId);
        }

        /// <summary>
        /// Test DeleteWebhookMessageAttempt
        /// </summary>
        [Fact]
        public void DeleteWebhookMessageAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int messageId = null;
            //int attemptId = null;
            //instance.DeleteWebhookMessageAttempt(id, messageId, attemptId);
        }

        /// <summary>
        /// Test GetSingleWebhookMessage
        /// </summary>
        [Fact]
        public void GetSingleWebhookMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int messageId = null;
            //var response = instance.GetSingleWebhookMessage(id, messageId);
            //Assert.IsType<WebhookMessageSingle>(response);
        }

        /// <summary>
        /// Test GetSingleWebhookMessageAttempt
        /// </summary>
        [Fact]
        public void GetSingleWebhookMessageAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int messageId = null;
            //int attemptId = null;
            //var response = instance.GetSingleWebhookMessageAttempt(id, messageId, attemptId);
            //Assert.IsType<WebhookAttemptSingle>(response);
        }

        /// <summary>
        /// Test GetWebhook
        /// </summary>
        [Fact]
        public void GetWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetWebhook(id);
            //Assert.IsType<WebhookSingle>(response);
        }

        /// <summary>
        /// Test GetWebhookMessageAttempts
        /// </summary>
        [Fact]
        public void GetWebhookMessageAttemptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int messageId = null;
            //int? page = null;
            //var response = instance.GetWebhookMessageAttempts(id, messageId, page);
            //Assert.IsType<WebhookAttemptArray>(response);
        }

        /// <summary>
        /// Test GetWebhookMessages
        /// </summary>
        [Fact]
        public void GetWebhookMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetWebhookMessages(id);
            //Assert.IsType<WebhookMessageArray>(response);
        }

        /// <summary>
        /// Test ListWebhook
        /// </summary>
        [Fact]
        public void ListWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //var response = instance.ListWebhook(page);
            //Assert.IsType<WebhookArray>(response);
        }

        /// <summary>
        /// Test StoreWebhook
        /// </summary>
        [Fact]
        public void StoreWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookStore webhookStore = null;
            //var response = instance.StoreWebhook(webhookStore);
            //Assert.IsType<WebhookSingle>(response);
        }

        /// <summary>
        /// Test SubmitWebook
        /// </summary>
        [Fact]
        public void SubmitWebookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.SubmitWebook(id);
        }

        /// <summary>
        /// Test UpdateWebhook
        /// </summary>
        [Fact]
        public void UpdateWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //WebhookUpdate webhookUpdate = null;
            //var response = instance.UpdateWebhook(id, webhookUpdate);
            //Assert.IsType<WebhookSingle>(response);
        }
    }
}
