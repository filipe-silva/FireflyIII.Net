/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing CategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CategoriesApiTests : IDisposable
    {
        private CategoriesApi instance;

        public CategoriesApiTests()
        {
            instance = new CategoriesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CategoriesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CategoriesApi
            //Assert.IsType<CategoriesApi>(instance);
        }

        /// <summary>
        /// Test DeleteCategory
        /// </summary>
        [Fact]
        public void DeleteCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteCategory(id, xTraceId);
        }

        /// <summary>
        /// Test GetCategory
        /// </summary>
        [Fact]
        public void GetCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //var response = instance.GetCategory(id, xTraceId, start, end);
            //Assert.IsType<CategorySingle>(response);
        }

        /// <summary>
        /// Test ListAttachmentByCategory
        /// </summary>
        [Fact]
        public void ListAttachmentByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAttachmentByCategory(id, xTraceId, page);
            //Assert.IsType<AttachmentArray>(response);
        }

        /// <summary>
        /// Test ListCategory
        /// </summary>
        [Fact]
        public void ListCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListCategory(xTraceId, page);
            //Assert.IsType<CategoryArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByCategory
        /// </summary>
        [Fact]
        public void ListTransactionByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByCategory(id, xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreCategory
        /// </summary>
        [Fact]
        public void StoreCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Category category = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreCategory(category, xTraceId);
            //Assert.IsType<CategorySingle>(response);
        }

        /// <summary>
        /// Test UpdateCategory
        /// </summary>
        [Fact]
        public void UpdateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //CategoryUpdate categoryUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateCategory(id, categoryUpdate, xTraceId);
            //Assert.IsType<CategorySingle>(response);
        }
    }
}
