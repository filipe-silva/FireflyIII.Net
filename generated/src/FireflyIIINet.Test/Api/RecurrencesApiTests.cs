/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing RecurrencesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RecurrencesApiTests : IDisposable
    {
        private RecurrencesApi instance;

        public RecurrencesApiTests()
        {
            instance = new RecurrencesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecurrencesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RecurrencesApi
            //Assert.IsType<RecurrencesApi>(instance);
        }

        /// <summary>
        /// Test DeleteRecurrence
        /// </summary>
        [Fact]
        public void DeleteRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteRecurrence(id, xTraceId);
        }

        /// <summary>
        /// Test GetRecurrence
        /// </summary>
        [Fact]
        public void GetRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetRecurrence(id, xTraceId);
            //Assert.IsType<RecurrenceSingle>(response);
        }

        /// <summary>
        /// Test ListRecurrence
        /// </summary>
        [Fact]
        public void ListRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRecurrence(xTraceId, page);
            //Assert.IsType<RecurrenceArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByRecurrence
        /// </summary>
        [Fact]
        public void ListTransactionByRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByRecurrence(id, xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreRecurrence
        /// </summary>
        [Fact]
        public void StoreRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RecurrenceStore recurrenceStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreRecurrence(recurrenceStore, xTraceId);
            //Assert.IsType<RecurrenceSingle>(response);
        }

        /// <summary>
        /// Test UpdateRecurrence
        /// </summary>
        [Fact]
        public void UpdateRecurrenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RecurrenceUpdate recurrenceUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateRecurrence(id, recurrenceUpdate, xTraceId);
            //Assert.IsType<RecurrenceSingle>(response);
        }
    }
}
