/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing RulesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RulesApiTests : IDisposable
    {
        private RulesApi instance;

        public RulesApiTests()
        {
            instance = new RulesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RulesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RulesApi
            //Assert.IsType<RulesApi>(instance);
        }

        /// <summary>
        /// Test DeleteRule
        /// </summary>
        [Fact]
        public void DeleteRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteRule(id, xTraceId);
        }

        /// <summary>
        /// Test FireRule
        /// </summary>
        [Fact]
        public void FireRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //List<long>? accounts = null;
            //instance.FireRule(id, xTraceId, start, end, accounts);
        }

        /// <summary>
        /// Test GetRule
        /// </summary>
        [Fact]
        public void GetRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetRule(id, xTraceId);
            //Assert.IsType<RuleSingle>(response);
        }

        /// <summary>
        /// Test ListRule
        /// </summary>
        [Fact]
        public void ListRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRule(xTraceId, page);
            //Assert.IsType<RuleArray>(response);
        }

        /// <summary>
        /// Test StoreRule
        /// </summary>
        [Fact]
        public void StoreRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RuleStore ruleStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreRule(ruleStore, xTraceId);
            //Assert.IsType<RuleSingle>(response);
        }

        /// <summary>
        /// Test TestRule
        /// </summary>
        [Fact]
        public void TestRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //List<long>? accounts = null;
            //var response = instance.TestRule(id, xTraceId, start, end, accounts);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test UpdateRule
        /// </summary>
        [Fact]
        public void UpdateRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RuleUpdate ruleUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateRule(id, ruleUpdate, xTraceId);
            //Assert.IsType<RuleSingle>(response);
        }
    }
}
