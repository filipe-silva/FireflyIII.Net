/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing TagsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TagsApiTests : IDisposable
    {
        private TagsApi instance;

        public TagsApiTests()
        {
            instance = new TagsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TagsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TagsApi
            //Assert.IsType<TagsApi>(instance);
        }

        /// <summary>
        /// Test DeleteTag
        /// </summary>
        [Fact]
        public void DeleteTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid? xTraceId = null;
            //instance.DeleteTag(tag, xTraceId);
        }

        /// <summary>
        /// Test GetTag
        /// </summary>
        [Fact]
        public void GetTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.GetTag(tag, xTraceId, page);
            //Assert.IsType<TagSingle>(response);
        }

        /// <summary>
        /// Test ListAttachmentByTag
        /// </summary>
        [Fact]
        public void ListAttachmentByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAttachmentByTag(tag, xTraceId, page);
            //Assert.IsType<AttachmentArray>(response);
        }

        /// <summary>
        /// Test ListTag
        /// </summary>
        [Fact]
        public void ListTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListTag(xTraceId, page);
            //Assert.IsType<TagArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByTag
        /// </summary>
        [Fact]
        public void ListTransactionByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByTag(tag, xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreTag
        /// </summary>
        [Fact]
        public void StoreTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TagModelStore tagModelStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreTag(tagModelStore, xTraceId);
            //Assert.IsType<TagSingle>(response);
        }

        /// <summary>
        /// Test UpdateTag
        /// </summary>
        [Fact]
        public void UpdateTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tag = null;
            //TagModelUpdate tagModelUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateTag(tag, tagModelUpdate, xTraceId);
            //Assert.IsType<TagSingle>(response);
        }
    }
}
