/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing AboutApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AboutApiTests : IDisposable
    {
        private AboutApi instance;

        public AboutApiTests()
        {
            instance = new AboutApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AboutApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AboutApi
            //Assert.IsType<AboutApi>(instance);
        }

        /// <summary>
        /// Test GetAbout
        /// </summary>
        [Fact]
        public void GetAboutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //var response = instance.GetAbout(xTraceId);
            //Assert.IsType<SystemInfo>(response);
        }

        /// <summary>
        /// Test GetCron
        /// </summary>
        [Fact]
        public void GetCronTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cliToken = null;
            //Guid? xTraceId = null;
            //DateTime? date = null;
            //bool? force = null;
            //var response = instance.GetCron(cliToken, xTraceId, date, force);
            //Assert.IsType<CronResult>(response);
        }

        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Fact]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //var response = instance.GetCurrentUser(xTraceId);
            //Assert.IsType<UserSingle>(response);
        }
    }
}
