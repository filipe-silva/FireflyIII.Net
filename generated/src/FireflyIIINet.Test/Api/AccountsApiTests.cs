/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing AccountsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AccountsApiTests : IDisposable
    {
        private AccountsApi instance;

        public AccountsApiTests()
        {
            instance = new AccountsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AccountsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AccountsApi
            //Assert.IsType<AccountsApi>(instance);
        }

        /// <summary>
        /// Test DeleteAccount
        /// </summary>
        [Fact]
        public void DeleteAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteAccount(id, xTraceId);
        }

        /// <summary>
        /// Test GetAccount
        /// </summary>
        [Fact]
        public void GetAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? date = null;
            //var response = instance.GetAccount(id, xTraceId, date);
            //Assert.IsType<AccountSingle>(response);
        }

        /// <summary>
        /// Test ListAccount
        /// </summary>
        [Fact]
        public void ListAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? date = null;
            //AccountTypeFilter? type = null;
            //var response = instance.ListAccount(xTraceId, page, date, type);
            //Assert.IsType<AccountArray>(response);
        }

        /// <summary>
        /// Test ListAttachmentByAccount
        /// </summary>
        [Fact]
        public void ListAttachmentByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAttachmentByAccount(id, xTraceId, page);
            //Assert.IsType<AttachmentArray>(response);
        }

        /// <summary>
        /// Test ListPiggyBankByAccount
        /// </summary>
        [Fact]
        public void ListPiggyBankByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListPiggyBankByAccount(id, xTraceId, page);
            //Assert.IsType<PiggyBankArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByAccount
        /// </summary>
        [Fact]
        public void ListTransactionByAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //int? limit = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByAccount(id, xTraceId, page, limit, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test ListTransactionByAccountV2
        /// </summary>
        [Fact]
        public void ListTransactionByAccountV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //int? limit = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransactionByAccountV2(id, xTraceId, page, limit, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreAccount
        /// </summary>
        [Fact]
        public void StoreAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountStore accountStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreAccount(accountStore, xTraceId);
            //Assert.IsType<AccountSingle>(response);
        }

        /// <summary>
        /// Test UpdateAccount
        /// </summary>
        [Fact]
        public void UpdateAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //AccountUpdate accountUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateAccount(id, accountUpdate, xTraceId);
            //Assert.IsType<AccountSingle>(response);
        }
    }
}
