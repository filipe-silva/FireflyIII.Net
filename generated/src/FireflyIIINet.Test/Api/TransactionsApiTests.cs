/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing TransactionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransactionsApiTests : IDisposable
    {
        private TransactionsApi instance;

        public TransactionsApiTests()
        {
            instance = new TransactionsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransactionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransactionsApi
            //Assert.IsType<TransactionsApi>(instance);
        }

        /// <summary>
        /// Test DeleteTransaction
        /// </summary>
        [Fact]
        public void DeleteTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteTransaction(id, xTraceId);
        }

        /// <summary>
        /// Test DeleteTransactionJournal
        /// </summary>
        [Fact]
        public void DeleteTransactionJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteTransactionJournal(id, xTraceId);
        }

        /// <summary>
        /// Test GetTransaction
        /// </summary>
        [Fact]
        public void GetTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetTransaction(id, xTraceId);
            //Assert.IsType<TransactionSingle>(response);
        }

        /// <summary>
        /// Test GetTransactionByJournal
        /// </summary>
        [Fact]
        public void GetTransactionByJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetTransactionByJournal(id, xTraceId);
            //Assert.IsType<TransactionSingle>(response);
        }

        /// <summary>
        /// Test ListAttachmentByTransaction
        /// </summary>
        [Fact]
        public void ListAttachmentByTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListAttachmentByTransaction(id, xTraceId, page);
            //Assert.IsType<AttachmentArray>(response);
        }

        /// <summary>
        /// Test ListEventByTransaction
        /// </summary>
        [Fact]
        public void ListEventByTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListEventByTransaction(id, xTraceId, page);
            //Assert.IsType<PiggyBankEventArray>(response);
        }

        /// <summary>
        /// Test ListLinksByJournal
        /// </summary>
        [Fact]
        public void ListLinksByJournalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListLinksByJournal(id, xTraceId, page);
            //Assert.IsType<TransactionLinkArray>(response);
        }

        /// <summary>
        /// Test ListTransaction
        /// </summary>
        [Fact]
        public void ListTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //TransactionTypeFilter? type = null;
            //var response = instance.ListTransaction(xTraceId, page, start, end, type);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test StoreTransaction
        /// </summary>
        [Fact]
        public void StoreTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionStore transactionStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreTransaction(transactionStore, xTraceId);
            //Assert.IsType<TransactionSingle>(response);
        }

        /// <summary>
        /// Test UpdateTransaction
        /// </summary>
        [Fact]
        public void UpdateTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TransactionUpdate transactionUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateTransaction(id, transactionUpdate, xTraceId);
            //Assert.IsType<TransactionSingle>(response);
        }
    }
}
