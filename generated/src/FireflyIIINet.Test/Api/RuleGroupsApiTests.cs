/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing RuleGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RuleGroupsApiTests : IDisposable
    {
        private RuleGroupsApi instance;

        public RuleGroupsApiTests()
        {
            instance = new RuleGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RuleGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RuleGroupsApi
            //Assert.IsType<RuleGroupsApi>(instance);
        }

        /// <summary>
        /// Test DeleteRuleGroup
        /// </summary>
        [Fact]
        public void DeleteRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //instance.DeleteRuleGroup(id, xTraceId);
        }

        /// <summary>
        /// Test FireRuleGroup
        /// </summary>
        [Fact]
        public void FireRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //List<long>? accounts = null;
            //instance.FireRuleGroup(id, xTraceId, start, end, accounts);
        }

        /// <summary>
        /// Test GetRuleGroup
        /// </summary>
        [Fact]
        public void GetRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //var response = instance.GetRuleGroup(id, xTraceId);
            //Assert.IsType<RuleGroupSingle>(response);
        }

        /// <summary>
        /// Test ListRuleByGroup
        /// </summary>
        [Fact]
        public void ListRuleByGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRuleByGroup(id, xTraceId, page);
            //Assert.IsType<RuleArray>(response);
        }

        /// <summary>
        /// Test ListRuleGroup
        /// </summary>
        [Fact]
        public void ListRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListRuleGroup(xTraceId, page);
            //Assert.IsType<RuleGroupArray>(response);
        }

        /// <summary>
        /// Test StoreRuleGroup
        /// </summary>
        [Fact]
        public void StoreRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RuleGroupStore ruleGroupStore = null;
            //Guid? xTraceId = null;
            //var response = instance.StoreRuleGroup(ruleGroupStore, xTraceId);
            //Assert.IsType<RuleGroupSingle>(response);
        }

        /// <summary>
        /// Test TestRuleGroup
        /// </summary>
        [Fact]
        public void TestRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Guid? xTraceId = null;
            //int? page = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? searchLimit = null;
            //int? triggeredLimit = null;
            //List<long>? accounts = null;
            //var response = instance.TestRuleGroup(id, xTraceId, page, start, end, searchLimit, triggeredLimit, accounts);
            //Assert.IsType<TransactionArray>(response);
        }

        /// <summary>
        /// Test UpdateRuleGroup
        /// </summary>
        [Fact]
        public void UpdateRuleGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //RuleGroupUpdate ruleGroupUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdateRuleGroup(id, ruleGroupUpdate, xTraceId);
            //Assert.IsType<RuleGroupSingle>(response);
        }
    }
}
