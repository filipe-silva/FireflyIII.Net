/*
 * Firefly III API v2.0.0
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-03-05T14:16:31+00:00 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: james@firefly-iii.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using FireflyIIINet.Client;
using FireflyIIINet.Api;
// uncomment below to import models
//using FireflyIIINet.Model;

namespace FireflyIIINet.Test.Api
{
    /// <summary>
    ///  Class for testing PreferencesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PreferencesApiTests : IDisposable
    {
        private PreferencesApi instance;

        public PreferencesApiTests()
        {
            instance = new PreferencesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PreferencesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PreferencesApi
            //Assert.IsType<PreferencesApi>(instance);
        }

        /// <summary>
        /// Test GetPreference
        /// </summary>
        [Fact]
        public void GetPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? xTraceId = null;
            //var response = instance.GetPreference(name, xTraceId);
            //Assert.IsType<PreferenceSingle>(response);
        }

        /// <summary>
        /// Test GetPreferenceV2
        /// </summary>
        [Fact]
        public void GetPreferenceV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Guid? xTraceId = null;
            //var response = instance.GetPreferenceV2(name, xTraceId);
            //Assert.IsType<PreferenceSingle>(response);
        }

        /// <summary>
        /// Test ListPreference
        /// </summary>
        [Fact]
        public void ListPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? xTraceId = null;
            //int? page = null;
            //var response = instance.ListPreference(xTraceId, page);
            //Assert.IsType<PreferenceArray>(response);
        }

        /// <summary>
        /// Test StorePreference
        /// </summary>
        [Fact]
        public void StorePreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Preference preference = null;
            //Guid? xTraceId = null;
            //var response = instance.StorePreference(preference, xTraceId);
            //Assert.IsType<PreferenceSingle>(response);
        }

        /// <summary>
        /// Test UpdatePreference
        /// </summary>
        [Fact]
        public void UpdatePreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //PreferenceUpdate preferenceUpdate = null;
            //Guid? xTraceId = null;
            //var response = instance.UpdatePreference(name, preferenceUpdate, xTraceId);
            //Assert.IsType<PreferenceSingle>(response);
        }
    }
}
