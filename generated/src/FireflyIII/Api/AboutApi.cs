/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Client;
using FireflyIII.Client.Auth;
using FireflyIII.Model;

namespace FireflyIII.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAboutApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// System information end point.
        /// </summary>
        /// <remarks>
        /// Returns general system information and versions of the (supporting) software. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemInfo</returns>
        SystemInfo GetAbout(int operationIndex = 0);

        /// <summary>
        /// System information end point.
        /// </summary>
        /// <remarks>
        /// Returns general system information and versions of the (supporting) software. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemInfo</returns>
        ApiResponse<SystemInfo> GetAboutWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Currently authenticated user endpoint.
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated user. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSingle</returns>
        UserSingle GetCurrentUser(int operationIndex = 0);

        /// <summary>
        /// Currently authenticated user endpoint.
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated user. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        ApiResponse<UserSingle> GetCurrentUserWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAboutApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// System information end point.
        /// </summary>
        /// <remarks>
        /// Returns general system information and versions of the (supporting) software. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfo</returns>
        System.Threading.Tasks.Task<SystemInfo> GetAboutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// System information end point.
        /// </summary>
        /// <remarks>
        /// Returns general system information and versions of the (supporting) software. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemInfo>> GetAboutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Currently authenticated user endpoint.
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated user. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSingle</returns>
        System.Threading.Tasks.Task<UserSingle> GetCurrentUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Currently authenticated user endpoint.
        /// </summary>
        /// <remarks>
        /// Returns the currently authenticated user. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSingle>> GetCurrentUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAboutApi : IAboutApiSync, IAboutApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AboutApi : IAboutApi
    {
        private FireflyIII.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AboutApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AboutApi(string basePath)
        {
            this.Configuration = FireflyIII.Client.Configuration.MergeConfigurations(
                FireflyIII.Client.GlobalConfiguration.Instance,
                new FireflyIII.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AboutApi(FireflyIII.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Client.Configuration.MergeConfigurations(
                FireflyIII.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AboutApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AboutApi(FireflyIII.Client.ISynchronousClient client, FireflyIII.Client.IAsynchronousClient asyncClient, FireflyIII.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// System information end point. Returns general system information and versions of the (supporting) software. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SystemInfo</returns>
        public SystemInfo GetAbout(int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<SystemInfo> localVarResponse = GetAboutWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// System information end point. Returns general system information and versions of the (supporting) software. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SystemInfo</returns>
        public FireflyIII.Client.ApiResponse<SystemInfo> GetAboutWithHttpInfo(int operationIndex = 0)
        {
            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AboutApi.GetAbout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SystemInfo>("/api/v1/about", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAbout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// System information end point. Returns general system information and versions of the (supporting) software. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SystemInfo</returns>
        public async System.Threading.Tasks.Task<SystemInfo> GetAboutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<SystemInfo> localVarResponse = await GetAboutWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// System information end point. Returns general system information and versions of the (supporting) software. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SystemInfo)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<SystemInfo>> GetAboutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AboutApi.GetAbout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemInfo>("/api/v1/about", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAbout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currently authenticated user endpoint. Returns the currently authenticated user. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSingle</returns>
        public UserSingle GetCurrentUser(int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<UserSingle> localVarResponse = GetCurrentUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Currently authenticated user endpoint. Returns the currently authenticated user. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSingle</returns>
        public FireflyIII.Client.ApiResponse<UserSingle> GetCurrentUserWithHttpInfo(int operationIndex = 0)
        {
            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AboutApi.GetCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSingle>("/api/v1/about/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Currently authenticated user endpoint. Returns the currently authenticated user. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSingle</returns>
        public async System.Threading.Tasks.Task<UserSingle> GetCurrentUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<UserSingle> localVarResponse = await GetCurrentUserWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Currently authenticated user endpoint. Returns the currently authenticated user. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<UserSingle>> GetCurrentUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AboutApi.GetCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSingle>("/api/v1/about/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
