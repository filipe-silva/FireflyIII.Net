/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: thegrumpydictator@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FireflyIII.Client;
using FireflyIII.Client.Auth;
using FireflyIII.Model;

namespace FireflyIII.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAvailableBudget(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAvailableBudgetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle GetAvailableBudget(int id, int operationIndex = 0);

        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> GetAvailableBudgetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        AvailableBudgetArray ListAvailableBudget(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        ApiResponse<AvailableBudgetArray> ListAvailableBudgetWithHttpInfo(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle StoreAvailableBudget(AvailableBudget availableBudget, int operationIndex = 0);

        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> StoreAvailableBudgetWithHttpInfo(AvailableBudget availableBudget, int operationIndex = 0);
        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        AvailableBudgetSingle UpdateAvailableBudget(int id, AvailableBudget availableBudget, int operationIndex = 0);

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        ApiResponse<AvailableBudgetSingle> UpdateAvailableBudgetWithHttpInfo(int id, AvailableBudget availableBudget, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAvailableBudgetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an available budget.
        /// </summary>
        /// <remarks>
        /// Delete an available budget. Not much more to say.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvailableBudgetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> GetAvailableBudgetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single available budget.
        /// </summary>
        /// <remarks>
        /// Get a single available budget, by ID.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> GetAvailableBudgetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetAsync(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all available budget amounts.
        /// </summary>
        /// <remarks>
        /// Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetArray>> ListAvailableBudgetWithHttpInfoAsync(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> StoreAvailableBudgetAsync(AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store a new available budget
        /// </summary>
        /// <remarks>
        /// Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> StoreAvailableBudgetWithHttpInfoAsync(AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        System.Threading.Tasks.Task<AvailableBudgetSingle> UpdateAvailableBudgetAsync(int id, AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself.
        /// </summary>
        /// <remarks>
        /// Update existing available budget.
        /// </remarks>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableBudgetSingle>> UpdateAvailableBudgetWithHttpInfoAsync(int id, AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAvailableBudgetsApi : IAvailableBudgetsApiSync, IAvailableBudgetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AvailableBudgetsApi : IAvailableBudgetsApi
    {
        private FireflyIII.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvailableBudgetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AvailableBudgetsApi(string basePath)
        {
            this.Configuration = FireflyIII.Client.Configuration.MergeConfigurations(
                FireflyIII.Client.GlobalConfiguration.Instance,
                new FireflyIII.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AvailableBudgetsApi(FireflyIII.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FireflyIII.Client.Configuration.MergeConfigurations(
                FireflyIII.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FireflyIII.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableBudgetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AvailableBudgetsApi(FireflyIII.Client.ISynchronousClient client, FireflyIII.Client.IAsynchronousClient asyncClient, FireflyIII.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FireflyIII.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FireflyIII.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FireflyIII.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FireflyIII.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FireflyIII.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAvailableBudget(int id, int operationIndex = 0)
        {
            DeleteAvailableBudgetWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public FireflyIII.Client.ApiResponse<Object> DeleteAvailableBudgetWithHttpInfo(int id, int operationIndex = 0)
        {
            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AvailableBudgetsApi.DeleteAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAvailableBudgetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAvailableBudgetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an available budget. Delete an available budget. Not much more to say.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<Object>> DeleteAvailableBudgetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AvailableBudgetsApi.DeleteAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle GetAvailableBudget(int id, int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = GetAvailableBudgetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Client.ApiResponse<AvailableBudgetSingle> GetAvailableBudgetWithHttpInfo(int id, int operationIndex = 0)
        {
            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AvailableBudgetsApi.GetAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> GetAvailableBudgetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await GetAvailableBudgetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single available budget. Get a single available budget, by ID.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the available budget.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<AvailableBudgetSingle>> GetAvailableBudgetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AvailableBudgetsApi.GetAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetArray</returns>
        public AvailableBudgetArray ListAvailableBudget(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetArray> localVarResponse = ListAvailableBudgetWithHttpInfo(page, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetArray</returns>
        public FireflyIII.Client.ApiResponse<AvailableBudgetArray> ListAvailableBudgetWithHttpInfo(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0)
        {
            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "AvailableBudgetsApi.ListAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AvailableBudgetArray>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetArray</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetArray> ListAvailableBudgetAsync(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetArray> localVarResponse = await ListAvailableBudgetWithHttpInfoAsync(page, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all available budget amounts. Firefly III allows users to set the amount that is available to be budgeted in so-called \&quot;available budgets\&quot;. For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number. The default pagination is 50. (optional)</param>
        /// <param name="start">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="end">A date formatted YYYY-MM-DD.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetArray)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<AvailableBudgetArray>> ListAvailableBudgetWithHttpInfoAsync(int? page = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(FireflyIII.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            localVarRequestOptions.Operation = "AvailableBudgetsApi.ListAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AvailableBudgetArray>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle StoreAvailableBudget(AvailableBudget availableBudget, int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = StoreAvailableBudgetWithHttpInfo(availableBudget);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Client.ApiResponse<AvailableBudgetSingle> StoreAvailableBudgetWithHttpInfo(AvailableBudget availableBudget, int operationIndex = 0)
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
            {
                throw new FireflyIII.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->StoreAvailableBudget");
            }

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = availableBudget;

            localVarRequestOptions.Operation = "AvailableBudgetsApi.StoreAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AvailableBudgetSingle>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> StoreAvailableBudgetAsync(AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await StoreAvailableBudgetWithHttpInfoAsync(availableBudget, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store a new available budget Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="availableBudget">JSON array or key&#x3D;value pairs with the necessary available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<AvailableBudgetSingle>> StoreAvailableBudgetWithHttpInfoAsync(AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
            {
                throw new FireflyIII.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->StoreAvailableBudget");
            }


            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = availableBudget;

            localVarRequestOptions.Operation = "AvailableBudgetsApi.StoreAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AvailableBudgetSingle>("/api/v1/available_budgets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoreAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AvailableBudgetSingle</returns>
        public AvailableBudgetSingle UpdateAvailableBudget(int id, AvailableBudget availableBudget, int operationIndex = 0)
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = UpdateAvailableBudgetWithHttpInfo(id, availableBudget);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AvailableBudgetSingle</returns>
        public FireflyIII.Client.ApiResponse<AvailableBudgetSingle> UpdateAvailableBudgetWithHttpInfo(int id, AvailableBudget availableBudget, int operationIndex = 0)
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
            {
                throw new FireflyIII.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->UpdateAvailableBudget");
            }

            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = availableBudget;

            localVarRequestOptions.Operation = "AvailableBudgetsApi.UpdateAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AvailableBudgetSingle</returns>
        public async System.Threading.Tasks.Task<AvailableBudgetSingle> UpdateAvailableBudgetAsync(int id, AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FireflyIII.Client.ApiResponse<AvailableBudgetSingle> localVarResponse = await UpdateAvailableBudgetWithHttpInfoAsync(id, availableBudget, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing available budget, to change for example the date range of the amount or the amount itself. Update existing available budget.
        /// </summary>
        /// <exception cref="FireflyIII.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the object.X</param>
        /// <param name="availableBudget">JSON array or form value with updated available budget information. See the model for the exact specifications.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AvailableBudgetSingle)</returns>
        public async System.Threading.Tasks.Task<FireflyIII.Client.ApiResponse<AvailableBudgetSingle>> UpdateAvailableBudgetWithHttpInfoAsync(int id, AvailableBudget availableBudget, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'availableBudget' is set
            if (availableBudget == null)
            {
                throw new FireflyIII.Client.ApiException(400, "Missing required parameter 'availableBudget' when calling AvailableBudgetsApi->UpdateAvailableBudget");
            }


            FireflyIII.Client.RequestOptions localVarRequestOptions = new FireflyIII.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = FireflyIII.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = FireflyIII.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", FireflyIII.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = availableBudget;

            localVarRequestOptions.Operation = "AvailableBudgetsApi.UpdateAvailableBudget";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (firefly_iii_auth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AvailableBudgetSingle>("/api/v1/available_budgets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAvailableBudget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
